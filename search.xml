<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【第二期】 ts群每周学习一点点</title>
      <link href="/20190304/ts-group-2/"/>
      <url>/20190304/ts-group-2/</url>
      <content type="html"><![CDATA[<h1 id="【第二期】-推荐文章"><a href="#【第二期】-推荐文章" class="headerlink" title="【第二期】 推荐文章"></a>【第二期】 推荐文章</h1><ol><li>浅析Typescript设计模式 <a href="https://zhuanlan.zhihu.com/p/43283016" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43283016</a></li><li>TypeScript中的装饰器(Decorators)的本质是什么？ <a href="https://www.zhihu.com/question/68257128/answer/261502855" target="_blank" rel="noopener">https://www.zhihu.com/question/68257128/answer/261502855</a></li><li>Swoole 是 PHP 中的 Node.js? <a href="https://learnku.com/php/t/22245" target="_blank" rel="noopener">https://learnku.com/php/t/22245</a></li><li>在面试前必须要知道的 Redis 面试内容 <a href="https://learnku.com/articles/22363" target="_blank" rel="noopener">https://learnku.com/articles/22363</a></li><li>（译）别再使用 JWT 作为 Session 系统！问题重重且很危险 <a href="https://learnku.com/articles/22616" target="_blank" rel="noopener">https://learnku.com/articles/22616</a></li><li>实用 Docker 速查大全：快速认识 Docker 的概念和使用方法 <a href="https://learnku.com/articles/22822" target="_blank" rel="noopener">https://learnku.com/articles/22822</a></li><li>JS数据结构与算法_链表 <a href="https://segmentfault.com/a/1190000017970029" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017970029</a></li><li>前端进击的巨人（一）：执行上下文与执行栈，变量对象 <a href="https://segmentfault.com/a/1190000017890535" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017890535</a> </li><li>深入解读MySQL8.0 新特性 ：Crash Safe DDL <a href="https://segmentfault.com/a/1190000018306350" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018306350</a></li><li>TypeScript VS JavaScript 深度对比 <a href="https://www.jianshu.com/p/0dfbcd4a0757" target="_blank" rel="noopener">https://www.jianshu.com/p/0dfbcd4a0757</a></li></ol>]]></content>
      
      <categories>
          
          <category> ts交流群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts交流群 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【第一期】 ts群每周学习一点点</title>
      <link href="/20190225/ts-group-1/"/>
      <url>/20190225/ts-group-1/</url>
      <content type="html"><![CDATA[<ol><li>2019前端面试题汇总（主要为Vue）<a href="https://segmentfault.com/a/1190000018225708" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018225708</a> </li><li>2019 面试准备 - JS 原型与原型链 <a href="https://juejin.im/post/5c72a1766fb9a049ea3993e6" target="_blank" rel="noopener">https://juejin.im/post/5c72a1766fb9a049ea3993e6</a></li><li>【前端基础进阶】JS-Object 功能详解 <a href="https://segmentfault.com/a/1190000018252193" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018252193</a> (这篇内容配合MDN一起看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a>)</li><li>JS数据结构学习：链表 <a href="https://segmentfault.com/a/1190000018260869" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018260869</a></li><li>[译] 如何写一篇杀手级的软件工程师简历 <a href="https://juejin.im/post/5c6ca8b9f265da2dc13c7a10" target="_blank" rel="noopener">https://juejin.im/post/5c6ca8b9f265da2dc13c7a10</a></li><li>九种跨域方式实现原理（完整版）<a href="https://segmentfault.com/a/1190000018017118" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018017118</a></li><li>React 性能优化技巧总结 <a href="https://segmentfault.com/a/1190000018257360" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018257360</a></li><li>五个用/不用GraphQL的理由 <a href="https://www.jianshu.com/p/12dff5905cf6" target="_blank" rel="noopener">https://www.jianshu.com/p/12dff5905cf6</a> (我个人推荐看看GraphQL，官网：<a href="https://graphql.org/" target="_blank" rel="noopener">https://graphql.org/</a>)</li><li>开始使用GraphQL <a href="https://segmentfault.com/a/1190000010409624" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010409624</a></li><li>决胜未来，2019年前端开发十大战略性技术布局 <a href="https://segmentfault.com/a/1190000018166543" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018166543</a><h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1>-1. 对一道【脉脉】上 头条 算法面试题的思考<a href="https://segmentfault.com/a/1190000018203228" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018203228</a></li></ol>]]></content>
      
      <categories>
          
          <category> ts交流群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts交流群 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VUE|TypeScript|前端交流群</title>
      <link href="/20181126/qq-group/"/>
      <url>/20181126/qq-group/</url>
      <content type="html"><![CDATA[<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><h2 id="VUE-TypeScript-前端交流群"><a href="#VUE-TypeScript-前端交流群" class="headerlink" title="VUE|TypeScript|前端交流群"></a>VUE|TypeScript|前端交流群</h2><p>qq群号：<code>318195769</code></p><p><img src="1543218321236.png" alt="VUE|TypeScript|前端交流群"></p><p><a href="//shang.qq.com/wpa/qunwpa?idkey=82fdf39c9961feb2d72365f84ef3b72e8d7100875bfc3fb51369f7663f3b2d0f">【VUE|TypeScript|前端交流群】318195769</a></p><p>=======</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>f319b2dae82ea3c82f70a19a2d6ceecbe147aed8</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> qq交流群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qq交流群 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>联想air13的触摸板双指右键失效的问题</title>
      <link href="/20180503/right-key/"/>
      <url>/20180503/right-key/</url>
      <content type="html"><![CDATA[<ol><li>打开注册表 <code>Win+R</code> , 输入 <code>regedit</code> 回车</li><li><p>在注册表找到如下路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册表路径：计算机\HKEY_CURRENT_USER\Software\Elantech\SmartPad</span><br></pre></td></tr></table></figure></li><li><p>改如下两个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tap_Two_Finger</span><br><span class="line">Tap_Two_Finger_Enable</span><br></pre></td></tr></table></figure></li></ol><p>把这两个值都改成1，原来是7,0</p><ol start="4"><li>重启电脑</li></ol><p>结果图：<br><img src="20170730004052.png" alt="20170730004052.png"></p>]]></content>
      
      <categories>
          
          <category> lenovo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lenovo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php_js</title>
      <link href="/20180213/php-js/"/>
      <url>/20180213/php-js/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>professional-javascript-for-web-3-6</title>
      <link href="/20180107/professional-javascript-for-web-3-6/"/>
      <url>/20180107/professional-javascript-for-web-3-6/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>语法基础和数据类型</title>
      <link href="/20171229/grammar/"/>
      <url>/20171229/grammar/</url>
      <content type="html"><![CDATA[<blockquote><p>通过之前的两篇学习。感觉都变量和数据类型都没有很好的总结，这里引用下 MDN 的文章供大家阅读。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener">JavaScript指南-&gt;语法和数据类型</a></p></blockquote><blockquote><p>本章讨论 <code>JavaScript</code> 的基本语法，变量声明，数据类型 和 字面量。</p></blockquote><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>JavaScript 从 Java 中借用了大部分语法，但也受到 Awk，Perl 和 Python 的影响。 </p><p>JavaScript是区分大小写的，并使用 Unicode字符集。</p><p>在JavaScript中，指令被称为  statements，并用分号 (;)分隔。空格、制表符和换行符被称为空白字符。JavaScript 脚本的源文本是从左到右扫描，并将其转换成由 tokens（不可分割的词法单位）、控制字符、行终止符、注释或空白符组成的输入元素序列。ECMAScript 还定义了某些关键字和字面量，规定了如何自动插入分号（<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" target="_blank" rel="noopener">ASI</a>）来结束语句。但是，建议随时添加分号来结束你的语句，以避免可能的副作用。欲了解更多信息，请参阅 JavaScript <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar" target="_blank" rel="noopener">词法语法</a>详细参考。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释的语法与 C ++和许多其他语言中的语法相同:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这是一个更长的,</span></span><br><span class="line"><span class="comment">   多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 然而, 你不能, /* 嵌套注释 */</span> 语法错误 *<span class="regexp">/</span></span><br></pre></td></tr></table></figure></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>JavaScript有三种声明。  </p><ul><li>var<br>  声明一个变量，可选择将其初始化为一个值。</li><li>let<br>  声明一个块作用域的局部变量(block scope local variable)，可选择将其初始化为一个值。</li><li>const<br>  声明一个只读的常量。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在应用程序中，使用变量来作为值的符号名。变量的名字又叫做标识符，其需要遵守一定的规则。</p><p>一个 JavaScript 标识符必须以字母、下划线（_）或者美元符号（$）开头；后续的字符也可以是数字（0-9）。因为 JavaScript 语言是区分大小写的，这里所指的字母可以是“A”到“Z”（大写的）和“a”到“z”（小写的）。</p><p>你可以使用大部分 <code>ISO 8859-1</code> 或 <code>Unicode</code> 编码的字符作标识符，例如 å 和 ü。你也可以使用 <code>Unicode</code> [转义字符][3] 作标识符。</p><p>合法的标识符示例：<code>Number_hits</code> ， <code>temp99</code> 和 <code>_name</code>。<br>[3]:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#String_literals" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#String_literals</a></p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>你可以用以下三种方式声明变量：  </p><ul><li>使用关键词 <code>var</code> 。例如 <code>var x = 42</code> 。这个语法可以用来声明局部变量和全局变量。</li><li>直接赋值。例如，<code>x = 42</code>。这样就会声明了一个全局变量并会在严格模式下产生一个 <code>ReferenceError</code>。声明变量时不应该用这种方式。</li><li>使用关键词 <code>let</code>。例如 <code>let y = 13</code>。这个语法可以用来声明块作用域的局部变量(block scope local variable)。參考下方变量的作用域(Variable scope) 。</li></ul><h2 id="变量求值"><a href="#变量求值" class="headerlink" title="变量求值"></a>变量求值</h2><p>用 <code>var</code> 或 <code>let</code> 声明的且未赋初值的变量，值会被设定为 <code>undefined</code>。  </p><p>试图访问一个未声明的变量或者访问一个使用 <code>let</code> 声明的但未初始化的变量会导致一个 <code>ReferenceError</code> 异常被抛出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// a 的值是 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"The value of a is "</span> + a); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"The value of b is "</span> + b); </span><br><span class="line"></span><br><span class="line"><span class="comment">// c 的值是 undefined </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"The value of c is "</span> + c); </span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: x is not defined </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"The value of x is "</span> + x); </span><br><span class="line"><span class="keyword">let</span> x;</span><br></pre></td></tr></table></figure></p><p>你可以使用 <code>undefined</code> 来判断变量是否已赋值。以下的代码中，变量input未被赋值，因而if条件语句的求值结果是<code>true</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input;</span><br><span class="line"><span class="keyword">if</span>(input === <span class="literal">undefined</span>)&#123;</span><br><span class="line">  doThis();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  doThat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>undefined</code> 值在布尔类型环境中会被当作 false。例如，下面的代码将会执行函数 <code>myFunction</code>，因为数组 <code>myArray</code> 中的元素未被赋值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!myArray[<span class="number">0</span>]) &#123;</span><br><span class="line">  myFunction(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数值类型环境中 <code>undefined</code> 值会被转换为 <code>NaN</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 计算为 NaN</span></span><br><span class="line">a + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>当你对一个 <code>null</code> 变量求值时，空值 <code>null</code> 在数值类型环境中会被当作0来对待，而布尔类型环境中会被当作 <code>false</code>。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">typeof</span>(n);</span><br><span class="line"><span class="comment">// "object"</span></span><br><span class="line"><span class="comment">// The Null type has exactly one value, called null.</span></span><br><span class="line"><span class="built_in">console</span>.log(n * <span class="number">32</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。  </p><p>ECMAScript 6 之前的JavaScript没有 <a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Statements#Block_Statement" target="_blank" rel="noopener">语句块</a> 作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出 <code>5</code>，因为 <code>x</code> 的作用域是声明了 <code>x</code> 的那个函数（或全局范围），而不是 <code>if</code> 语句块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>如果使用 <code>ECMAScript 6</code> 中的 <code>let</code> 声明，上述行为将发生变化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure></p><h2 id="变量声明提升-Variable-hoisting"><a href="#变量声明提升-Variable-hoisting" class="headerlink" title="变量声明提升(Variable hoisting)"></a>变量声明提升(Variable hoisting)</h2><p><code>JavaScript</code> 变量的另一特别之处是，你可以引用稍后声明的变量而不会引发异常。这一概念称为变量声明提升(hoisting)；<code>JavaScript</code> 变量感觉上是被“提升”或移到了所有函数和语句之前。然而提升后的变量将返回 <code>undefined</code> 值。所以在使用或引用某个变量之后进行声明和初始化操作，这个被提升的引用仍将得到 <code>undefined</code> 值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(x === <span class="literal">undefined</span>); <span class="comment">// logs "true"</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// will return a value of undefined</span></span><br><span class="line"><span class="keyword">var</span> myvar = <span class="string">"my value"</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myvar); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> myvar = <span class="string">"local value"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>上面的例子，也可写作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x === <span class="literal">undefined</span>); <span class="comment">// logs "true"</span></span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myvar = <span class="string">"my value"</span>;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myvar;</span><br><span class="line">  <span class="built_in">console</span>.log(myvar); <span class="comment">// undefined</span></span><br><span class="line">  myvar = <span class="string">"local value"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>由于存在变量声明提升，一个函数中所有的var语句应尽可能地放在接近函数顶部的地方。这将大大提升程序代码的清晰度。  </p><p>在 <code>ECMAScript 2015</code> 中，<code>let（const）</code> 将不会提升变量到代码块的顶部。因此，在变量声明之前引用这个变量，将抛出错误ReferenceError。这个变量将从代码块一开始的时候就处在一个“暂时性死区”，直到这个变量被声明为止。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><h2 id="函数提升（Function-hoisting）"><a href="#函数提升（Function-hoisting）" class="headerlink" title="函数提升（Function hoisting）"></a>函数提升（Function hoisting）</h2><p>对于函数，只有函数声明会被提升到顶部，而不包括函数表达式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// "bar"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"bar"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数表达式   表达式定义的函数，称为匿名函数。匿名函数没有函数提升。*/</span></span><br><span class="line"></span><br><span class="line">baz(); <span class="comment">// TypeError: baz is not a function</span></span><br><span class="line"><span class="comment">//此时的"baz"相当于一个声明的变量，类型为undefined。</span></span><br><span class="line">由于baz只是相当于一个变量，因此浏览器认为<span class="string">"baz()"</span>不是一个函数。</span><br><span class="line"><span class="keyword">var</span> baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"bar2"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="全局变量-Global-variables"><a href="#全局变量-Global-variables" class="headerlink" title="全局变量(Global variables)"></a>全局变量(Global variables)</h2><p>全局变量实际上是全局对象的属性。在网页中，（译注：缺省的）全局对象是 window，所以你可以用形如 window.variable的语法来设置和访问全局变量。</p><p>因此，你可以通过指定 <code>window</code> 或 <code>frame</code> 的名字，从一个 <code>window</code> 或 <code>frame</code> 访问另一个 <code>window</code> 或 <code>frame</code> 中声明的变量。例如，在文档里声明一个叫 <code>phoneNumber</code> 的变量，那么你就可以在子框架里使用 <code>parent.phoneNumber</code> 来引用它。</p><h1 id="常量-Constants"><a href="#常量-Constants" class="headerlink" title="常量(Constants)"></a>常量(Constants)</h1><p>你可以用关键字 <code>const</code> 创建一个只读(read-only)的常量。常量标识符的命名规则和变量相同：必须以字母、下划线或美元符号开头并可以包含有字母、数字或下划线。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prefix = <span class="string">'212'</span>;</span><br></pre></td></tr></table></figure></p><p>常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明。它必须被初始化为某个值。</p><p>常量的作用域规则与 <code>let</code> 块级作用域变量相同。若省略 <code>const</code> 关键字，则该标识符将被视为变量。</p><p>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// THIS WILL CAUSE AN ERROR</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> f = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// THIS WILL CAUSE AN ERROR ALSO</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> g = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">var</span> g;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而,对象属性是不受保护的,所以可以使用如下语句来执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_OBJECT = &#123;<span class="string">"key"</span>: <span class="string">"value"</span>&#125;;</span><br><span class="line">MY_OBJECT.key = <span class="string">"otherValue"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="数据结构和类型"><a href="#数据结构和类型" class="headerlink" title="数据结构和类型"></a>数据结构和类型</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript语言可以识别下面 7 种不同类型的值：</p><p>六种 <code>原型</code> 数据类型（基本数据类型）:</p><ul><li><code>Boolean</code> .  布尔值，<code>true</code> 和 <code>false</code>.</li><li><code>null</code> . 一个表明 <code>null</code> 值的特殊关键字。 <code>JavaScript</code> 是大小写敏感的，因此 <code>null</code> 与 <code>Null</code>、<code>NULL</code>或其他变量完全不同。</li><li><code>undefined</code> .  变量未定义时的属性。</li><li><code>Number</code> .  表示数字，例如： <code>42</code> 或者 <code>3.14159</code>。</li><li><code>String</code> .  表示字符串，例如：<code>&quot;Howdy&quot;</code></li><li><code>Symbol</code> . ( 在 <code>ECMAScript 6</code> 中新添加的类型)。一种数据类型，它的实例是唯一且不可改变的。</li></ul><p>以及 <code>Object</code> 对象（复合数据类型）。  </p><p>仅凭这些为数不多的数据类型，你就可以在你的应用程序中执行有用的功能。</p><p><code>Objects</code> 和 <code>functions</code> 是本语言的其他两个基本要素。你可以将对象视为存放值的命名容器，而将函数视为你的应用程序能够执行的过程(procedures)。</p><h2 id="数据类型的转换-Data-type-conversion"><a href="#数据类型的转换-Data-type-conversion" class="headerlink" title="数据类型的转换(Data type conversion)"></a>数据类型的转换(Data type conversion)</h2><p>JavaScript是一种动态类型语言(dynamically typed language)。这意味着你声明变量时可以不必指定数据类型，而数据类型会在脚本执行时根据需要自动转换。因此，你可以这样来定义变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>然后，你还可以给同一个变量赋予一个字符串值，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer = <span class="string">"Thanks for all the fish..."</span>;</span><br></pre></td></tr></table></figure><p>因为 <code>JavaScript</code> 是动态类型的，这样赋值并不会提示出错。</p><p>在涉及加法运算符(+)的数字和字符串表达式中，JavaScript 会把数字值转换为字符串。例如，假设有如下的语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">"The answer is "</span> + <span class="number">42</span> <span class="comment">// "The answer is 42"</span></span><br><span class="line">y = <span class="number">42</span> + <span class="string">" is the answer"</span> <span class="comment">// "42 is the answer"</span></span><br></pre></td></tr></table></figure><p>在涉及其它运算符（译注：如下面的减号’-‘）时，JavaScript语言不会把数字变为字符串。例如（译注：第一例是数学运算，第二例是字符串运算）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"37"</span> - <span class="number">7</span> <span class="comment">// 30</span></span><br><span class="line"><span class="string">"37"</span> + <span class="number">7</span> <span class="comment">// "377"</span></span><br></pre></td></tr></table></figure><h2 id="字符串转换为数字-converting-strings-to-numbers"><a href="#字符串转换为数字-converting-strings-to-numbers" class="headerlink" title="字符串转换为数字(converting strings to numbers)"></a>字符串转换为数字(converting strings to numbers)</h2><p>有一些方法可以将内存中表示一个数字的字符串转换为对应的数字</p><p><code>parseInt()</code> 和 <code>parseFloat()</code><br>参见：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" target="_blank" rel="noopener">parseInt()</a>和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar" target="_blank" rel="noopener">parseFloat()</a>的相关页面。</p><p><code>parseInt</code> 仅能够返回整数，所以使用它会丢失小数部分。另外，调用 <code>parseInt</code> 时最好总是带上进制(radix) 参数，这个参数用于指定使用哪一种进制。</p><p>单目加法运算符<br>将字符串转换为数字的另一种方法是使用单目加法运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1.1"</span> + <span class="string">"1.1"</span> = <span class="string">"1.11.1"</span></span><br><span class="line">(+<span class="string">"1.1"</span>) + (+<span class="string">"1.1"</span>) = <span class="number">2.2</span>   <span class="comment">// 注：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></figure><h1 id="字面量-Literals"><a href="#字面量-Literals" class="headerlink" title="字面量 (Literals)"></a>字面量 (Literals)</h1><p>（译注：字面量是由语法表达式定义的常量；或，通过由一定字词组成的语词表达式定义的常量）</p><p>在JavaScript中，你可以使用各种字面量。这些字面量是脚本中按字面意思给出的固定的值，而不是变量。（译注：字面量是常量，其值是固定的，而且在程序脚本运行中不可更改，比如 <code>false</code> ，<code>3.1415</code> ，<code>thisIsStringOfHelloworld</code> ，<code>invokedFunction : myFunction(&quot;myArgument&quot;)</code> 。本节将介绍以下类型的字面量：  </p><ul><li>数组字面量(Array literals)</li><li>布尔字面量(Boolean literals)</li><li>浮点数字面量(Floating-point literals)</li><li>整数(Intergers)</li><li>对象字面量(Object literals)</li><li>RegExp literals</li><li>字符串字面量(String literals)</li></ul><h2 id="数组字面量-Array-literals"><a href="#数组字面量-Array-literals" class="headerlink" title="数组字面量 (Array literals)"></a>数组字面量 (Array literals)</h2><p>数组字面值是一个封闭在方括号对([])中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为其元素进行初始化，而其长度被设定为元素的个数。</p><p>下面的示例用3个元素生成数组coffees，它的长度是3。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coffees = [<span class="string">"French Roast"</span>, <span class="string">"Colombian"</span>, <span class="string">"Kona"</span>];</span><br><span class="line"><span class="keyword">var</span> a=[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 这里的数组字面值也是一种对象初始化器。参考<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Working_with_Objects#Using_Object_Initializers" target="_blank" rel="noopener">对象初始化器的使用</a>。</p></blockquote><p>若在顶层（全局）脚本里用字面值创建数组，JavaScript语言将会在每次对包含该数组字面值的表达式求值时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时都会被创建一次。</p><p>数组字面值同时也是数组对象。有关数组对象的详情请参见数组对象一文。</p><p>数组字面值中的多余逗号<br>（译注：声明时）你不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没有被指定的元素，其初始值是undefined。以下示例创建了一个名为fish的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fish = [<span class="string">"Lion"</span>, , <span class="string">"Angel"</span>];</span><br></pre></td></tr></table></figure><p>在这个数组中，有两个已被赋值的元素，和一个空元素（fish[0]是”Lion”，fish<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" target="_blank" rel="noopener">1</a>是undefined，而fish<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar" target="_blank" rel="noopener">2</a>是”Angel”；译注：此时数组的长度属性fish.length是3)。</p><p>如果你在元素列表的尾部添加了一个逗号，它将会被忽略。在下面的例子中，数组的长度是3，并不存在myList[3]这个元素（译注：这是指数组的第4个元素噢，作者是在帮大家复习数组元素的排序命名方法）。元素列表中其它所有的逗号都表示一个新元素（的开始）。</p><blockquote><p><strong>注意</strong>：尾部的逗号在早期版本的浏览器中会产生错误，因而编程时的最佳实践方式就是移除它们。</p></blockquote><p>(译注：而“现代”的浏览器似乎鼓励这种方式，因为好多网页中都这么写？)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList = [<span class="string">'home'</span>, , <span class="string">'school'</span>, ];</span><br></pre></td></tr></table></figure><p>在下面的例子中，数组的长度是4，元素myList[0]和myList<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar" target="_blank" rel="noopener">2</a>缺失（译注：没被赋值，因而是undefined）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList = [ , <span class="string">'home'</span>, , <span class="string">'school'</span>];</span><br></pre></td></tr></table></figure><p>再看一个例子。在这里，该数组的长度是4，元素myList<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" target="_blank" rel="noopener">1</a>和myList[3]被漏掉了。（但是）只有最后的那个逗号被忽略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList = [<span class="string">'home'</span>, , <span class="string">'school'</span>, , ];</span><br></pre></td></tr></table></figure><p>理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解JavaScript是十分重要的。但是，在你自己写代码时：显式地将缺失的元素声明为undefined，将大大提高你的代码的清晰度和可维护性。</p><h2 id="布尔字面量-Boolean-literals"><a href="#布尔字面量-Boolean-literals" class="headerlink" title="布尔字面量 (Boolean literals)"></a>布尔字面量 (Boolean literals)</h2><blockquote><p>（译注：即逻辑字面量）</p></blockquote><p>布尔类型有两种字面量： <code>true</code> 和 <code>false</code>。</p><p>不要混淆作为布尔对象的真和假与布尔类型的原始值true和false。布尔对象是原始布尔数据类型的一个包装器。参见 <a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Predefined_Core_Objects#Boolean_Object" target="_blank" rel="noopener">布尔对象</a>。</p><h2 id="整数-Intergers"><a href="#整数-Intergers" class="headerlink" title="整数 (Intergers)"></a>整数 (Intergers)</h2><blockquote><p>（译注：原文如此，没写成“整数字面量”，这里指的是整数字面量。）</p></blockquote><p>整数可以用十进制（基数为10）、十六进制（基数为16）、八进制（基数为8）以及二进制（基数为2）表示。</p><ul><li>十进制整数字面量由一串数字序列组成，且没有前缀0。</li><li>八进制的整数以 0（或0O、0o）开头，只能包括数字0-7。</li><li>十六进制整数以0x（或0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。</li><li>二进制整数以0b（或0B）开头，只能包含数字0和1。</li><li>严格模式下，八进制整数字面量必须以0o或0O开头，而不能以0开头。</li></ul><p>整数字面量举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0, 117 and -345 (十进制, 基数为10)</span><br><span class="line">015, 0001 and -0o77 (八进制, 基数为8) </span><br><span class="line">0x1123, 0x00111 and -0xF1A7 (十六进制, 基数为16或&quot;hex&quot;)</span><br><span class="line">0b11, 0b0011 and -0b11 (二进制, 基数为2)</span><br></pre></td></tr></table></figure><h2 id="浮点数字面量-Floating-point-literals"><a href="#浮点数字面量-Floating-point-literals" class="headerlink" title="浮点数字面量 (Floating-point literals)"></a>浮点数字面量 (Floating-point literals)</h2><p>浮点数字面值可以有以下的组成部分：</p><ul><li>一个十进制整数，可以带正负号（即前缀“+”或“ - ”），</li><li>小数点（“.”），</li><li>小数部分（由一串十进制数表示），</li><li>指数部分。</li></ul><p>指数部分以“e”或“E”开头，后面跟着一个整数，可以有正负号（即前缀“+”或“-”）。浮点数字面量至少有一位数字，而且必须带小数点或者“e”（大写“E”也可）。</p><p>简言之，其语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(+|-)][digits][.digits][(E|e)[(+|-)]digits]</span><br></pre></td></tr></table></figure><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span>      </span><br><span class="line"><span class="number">-.2345789</span> <span class="comment">// -0.23456789</span></span><br><span class="line"><span class="number">-3.12e+12</span>  <span class="comment">// -3.12*1012</span></span><br><span class="line"><span class="number">.1e-23</span>    <span class="comment">// 0.1*10-23=10-24=1e-24</span></span><br></pre></td></tr></table></figure></p><h2 id="对象字面量-Object-literals"><a href="#对象字面量-Object-literals" class="headerlink" title="对象字面量 (Object literals)"></a>对象字面量 (Object literals)</h2><p>对象字面值是封闭在花括号对({})中的一个对象的零个或多个”属性名-值”对的（元素）列表。你不能在一条语句的开头就使用对象字面值，这将导致错误或产生超出预料的行为， 因为此时左花括号（{）会被认为是一个语句块的起始符号。（译者：这 里需要对语句statement、块block等基本名词的解释）</p><p>以下是一个对象字面值的例子。对象car的第一个元素（译注：即一个属性/值对）定义了属性myCar；第二个元素，属性getCar，引用了一个函数（即CarTypes(“Honda”)）；第三个元素，属性special，使用了一个已有的变量（即Sales）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Sales = <span class="string">"Toyota"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarTypes</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (name === <span class="string">"Honda"</span>) ?</span><br><span class="line">    name :</span><br><span class="line">    <span class="string">"Sorry, we don't sell "</span> + name + <span class="string">"."</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = &#123; <span class="attr">myCar</span>: <span class="string">"Saturn"</span>, <span class="attr">getCar</span>: CarTypes(<span class="string">"Honda"</span>), <span class="attr">special</span>: Sales &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car.myCar);   <span class="comment">// Saturn</span></span><br><span class="line"><span class="built_in">console</span>.log(car.getCar);  <span class="comment">// Honda</span></span><br><span class="line"><span class="built_in">console</span>.log(car.special); <span class="comment">// Toyota</span></span><br></pre></td></tr></table></figure><p>更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123; <span class="attr">manyCars</span>: &#123;<span class="attr">a</span>: <span class="string">"Saab"</span>, <span class="string">"b"</span>: <span class="string">"Jeep"</span>&#125;, <span class="number">7</span>: <span class="string">"Mazda"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car.manyCars.b); <span class="comment">// Jeep</span></span><br><span class="line"><span class="built_in">console</span>.log(car[<span class="number">7</span>]); <span class="comment">// Mazda</span></span><br></pre></td></tr></table></figure><p>对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的javascript标识符，它必须用””包裹。属性的名字不合法，那么便不能用.访问属性值，而是通过类数组标记(“[]”)访问和赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unusualPropertyNames = &#123;</span><br><span class="line">  <span class="string">""</span>: <span class="string">"An empty string"</span>,</span><br><span class="line">  <span class="string">"!"</span>: <span class="string">"Bang!"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unusualPropertyNames.<span class="string">""</span>);   <span class="comment">// 语法错误: Unexpected string</span></span><br><span class="line"><span class="built_in">console</span>.log(unusualPropertyNames[<span class="string">""</span>]);  <span class="comment">// An empty string</span></span><br><span class="line"><span class="built_in">console</span>.log(unusualPropertyNames.!);    <span class="comment">// 语法错误: Unexpected token !</span></span><br><span class="line"><span class="built_in">console</span>.log(unusualPropertyNames[<span class="string">"!"</span>]); <span class="comment">// Bang!</span></span><br></pre></td></tr></table></figure><p><strong>增强的对象字面量 (Enhanced Object literals)</strong><br>在ES2015，对象字面值扩展支持在创建时设置原型，简写foo：foo分配，定义方法，加工父函数（super calls），计算属性名(动态)。总之，这些也带来了对象字面值和类声明紧密联系起来，让基于对象的设计得益于一些同样的便利。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// __proto__</span></span><br><span class="line">    __proto__: theProtoObj,</span><br><span class="line">    <span class="comment">// Shorthand for ‘handler: handler’</span></span><br><span class="line">    handler,</span><br><span class="line">    <span class="comment">// Methods</span></span><br><span class="line">    toString() &#123;</span><br><span class="line">     <span class="comment">// Super calls</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">"d "</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Computed (dynamic) property names</span></span><br><span class="line">    [ <span class="string">'prop_'</span> + <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="number">42</span>)() ]: <span class="number">42</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请注意：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">a</span>: <span class="string">"alpha"</span>, <span class="number">2</span>: <span class="string">"two"</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo.a);    <span class="comment">// alpha</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">2</span>]);   <span class="comment">// two</span></span><br><span class="line"><span class="comment">//console.log(foo.2);  // Error: missing ) after argument list</span></span><br><span class="line"><span class="comment">//console.log(foo[a]); // Error: a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">"a"</span>]); <span class="comment">// alpha</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">"2"</span>]); <span class="comment">// two</span></span><br></pre></td></tr></table></figure><h2 id="RegExp-字面值"><a href="#RegExp-字面值" class="headerlink" title="RegExp 字面值"></a>RegExp 字面值</h2><p>一个正则表达式是字符被斜线（译注：正斜杠“/”）围成的表达式。下面是一个正则表达式文字的一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串字面量-String-literals"><a href="#字符串字面量-String-literals" class="headerlink" title="字符串字面量 (String literals)"></a>字符串字面量 (String literals)</h2><p>字符串字面量是由双引号（”）对或单引号（’）括起来的零个或多个字符。字符串被限定在同种引号之间；也即，必须是成对单引号或成对双引号。下面的例子都是字符串字面值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;foo&quot;</span><br><span class="line">&apos;bar&apos;</span><br><span class="line">&quot;1234&quot;</span><br><span class="line">&quot;one line \n another line&quot;</span><br><span class="line">&quot;John&apos;s cat&quot;</span><br></pre></td></tr></table></figure><p>你可以在字符串字面值上使用字符串对象的所有方法——JavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串对象。你也能用对字符串字面值使用类似String.length的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"John's cat"</span>.length) </span><br><span class="line"><span class="comment">// 将打印字符串中的字符个数（包括空格） </span></span><br><span class="line"><span class="comment">// 结果为：10</span></span><br></pre></td></tr></table></figure><p>在ES2015中，还提供了一种模板字符串（template literals），模板字符串提供了一些语法糖来帮你构造字符串。这与Perl、Python还有其他语言中的字符串插值（string interpolation）的特性非常相似。除此之外，你可以在通过模板字符串前添加一个tag来自定义模板字符串的解析过程，这可以用来防止注入攻击，或者用来建立基于字符串的高级数据抽象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic literal string creation</span></span><br><span class="line">In JavaScript <span class="string">'\n'</span> is a line-feed.</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiline strings</span></span><br><span class="line"><span class="string">`In JavaScript this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String interpolation</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct an HTTP request prefix is used to interpret the replacements and construction</span></span><br><span class="line">POST <span class="string">`http://foo.org/bar?a=<span class="subst">$&#123;a&#125;</span>&amp;b=<span class="subst">$&#123;b&#125;</span></span></span><br><span class="line"><span class="string">     Content-Type: application/json</span></span><br><span class="line"><span class="string">     X-Credentials: <span class="subst">$&#123;credentials&#125;</span></span></span><br><span class="line"><span class="string">     &#123; "foo": <span class="subst">$&#123;foo&#125;</span>,</span></span><br><span class="line"><span class="string">       "bar": <span class="subst">$&#123;bar&#125;</span>&#125;`</span> (myOnReadyStateChangeHandler);</span><br></pre></td></tr></table></figure><p>除非有特别需要使用字符串对象，否则,你应当始终使用字符串字面值。要查看字符串对象的有关细节，请参见<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Predefined_Core_Objects#String_Object" target="_blank" rel="noopener">字符串对象</a>。</p><p>在字符串中使用的特殊字符<br>作为一般字符的扩展，你可以在字符串中使用特殊字符，如下例所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"one line \n another line"</span></span><br></pre></td></tr></table></figure><p>以下表格列举了你能在JavaScript的字符串中使用的特殊字符。</p><table><thead><tr><th>字符</th><th>意思</th></tr></thead><tbody><tr><td>\0</td><td>Null字节</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>Tab (制表符)</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\’</td><td>单引号</td></tr><tr><td>\”</td><td>双引号</td></tr><tr><td>\</td><td>反斜杠字符（\）</td></tr><tr><td>\XXX</td><td>由从0到377最多三位八进制数XXX表示的 Latin-1 字符。例如，\251是版权符号的八进制序列。</td></tr><tr><td>\xXX</td><td>由从00和FF的两位十六进制数字XX表示的Latin-1字符。例如，\ xA9是版权符号的十六进制序列。</td></tr><tr><td>\uXXXX</td><td>由四位十六进制数字XXXX表示的Unicode字符。例如，\ u00A9是版权符号的Unicode序列。见Unicode escape sequences (Unicode 转义字符).</td></tr><tr><td>\u{XXXXX}</td><td>Unicode代码点 (code point) 转义字符。例如，\u{2F804} 相当于Unicode转义字符 \uD87E\uDC04的简写。</td></tr></tbody></table><blockquote><p>译注：严格模式下，不能使用八进制转义字符。</p></blockquote><p><strong>转义字符</strong><br>对于那些未出现在上中的字符，其所带的前导反斜线’\’将被忽略。但是，这一用法已被废弃，应当避免使用。</p><p>通过在引号前加上反斜线’\’，可以在字符串中插入引号，这就是引号转义。例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quote = <span class="string">"He read \"The Cremation of Sam McGee\" by R.W. Service."</span>;</span><br><span class="line"><span class="built_in">console</span>.log(quote);</span><br></pre></td></tr></table></figure><p>代码的运行结果为:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">He read <span class="string">"The Cremation of Sam McGee"</span> by R.W. Service.</span><br></pre></td></tr></table></figure><p>要在字符串中插入’\’字面值，必须转义反斜线。例如，要把文件路径 c:\temp 赋值给一个字符串，可以采用如下方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="string">"c:\\temp"</span>;</span><br></pre></td></tr></table></figure><p>也可以在换行之前加上反斜线以转义换行（译注：实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"this string \</span></span><br><span class="line"><span class="string">is broken \</span></span><br><span class="line"><span class="string">across multiple\</span></span><br><span class="line"><span class="string">lines."</span></span><br><span class="line"><span class="built_in">console</span>.log(str);   <span class="comment">// this string is broken across multiplelines.</span></span><br></pre></td></tr></table></figure><p>Javascript没有“heredoc”语法，但可以用行末的换行符转义和转义的换行来近似实现 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> poem = </span><br><span class="line"><span class="string">"Roses are red,\n\</span></span><br><span class="line"><span class="string">Violets are blue.\n\</span></span><br><span class="line"><span class="string">Sugar is sweet,\n\</span></span><br><span class="line"><span class="string">and so is foo."</span></span><br></pre></td></tr></table></figure><p>ECMAScript 2015 增加了一种新的字面量，叫做模板字面量 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">template literals</a>。它包含一些新特征，包括了多行字符串！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> poem =</span><br><span class="line"><span class="string">`Roses are red,</span></span><br><span class="line"><span class="string">Violets are blue.</span></span><br><span class="line"><span class="string">Sugar is sweet,</span></span><br><span class="line"><span class="string">and so is foo.`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript高级程序设计第三版（读后感）（第五篇）</title>
      <link href="/20171226/professional-javascript-for-web-3-5/"/>
      <url>/20171226/professional-javascript-for-web-3-5/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript高级程序设计第三版（读后感）（第五篇）"><a href="#JavaScript高级程序设计第三版（读后感）（第五篇）" class="headerlink" title="JavaScript高级程序设计第三版（读后感）（第五篇）"></a>JavaScript高级程序设计第三版（读后感）（第五篇）</h1><blockquote><p>上一章节详细的说了基本类型。那么这一章节必然是引用类型。</p></blockquote><p>书中讲述了这些类型：  </p><ul><li>Object 类型</li><li>Array 类型</li><li>Date 类型</li><li>RegExp 类型</li><li>Function 类型</li><li>基本包装类型</li><li>单体内置对象</li></ul><h2 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h2><h2 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h2><h2 id="Date-类型"><a href="#Date-类型" class="headerlink" title="Date 类型"></a>Date 类型</h2><h2 id="RegExp-类型"><a href="#RegExp-类型" class="headerlink" title="RegExp 类型"></a>RegExp 类型</h2><h2 id="Function-类型"><a href="#Function-类型" class="headerlink" title="Function 类型"></a>Function 类型</h2><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><h2 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h2>]]></content>
      
      <categories>
          
          <category> professional_javascript_for_web_develop_3rd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript-web-develop-3rd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript高级程序设计第三版（读后感）（第四篇）</title>
      <link href="/20171219/professional-javascript-for-web-3-4/"/>
      <url>/20171219/professional-javascript-for-web-3-4/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript高级程序设计第三版（读后感）（第四篇）"><a href="#JavaScript高级程序设计第三版（读后感）（第四篇）" class="headerlink" title="JavaScript高级程序设计第三版（读后感）（第四篇）"></a>JavaScript高级程序设计第三版（读后感）（第四篇）</h1><blockquote><p>看了上一章节后是不是发现都 <code>JavaScript</code> 什么操作符？运算符？如果有其他程序语言基础那还好理解。如果不是，那就有点麻烦了。其实这就好比学数学，先学一堆没啥用的公式，然后再用于实际。那上一章节就是学一些公式。那接下来这一节还是学习公式吧。</p></blockquote><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>在所有函数之外声明的变量，叫做 <code>全局变量</code> ，因为它可被当前文档中的任何其他代码所访问。<br>在函数内部声明的变量，叫做 <code>局部变量</code> ，因为它只能在该函数内部访问。  </p><p>在书中提到的是 <code>ES6</code> 以前的语法。所以没有 <code>语句块</code> 这一说法。但是在 <code>ES6</code> 就会发现作用域开始有了明显的区分。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1;</span></span><br><span class="line"><span class="comment">// =========</span></span><br><span class="line"><span class="comment">// ES6 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b is not defined;</span></span><br></pre></td></tr></table></figure></p><p>通过这两个例子就能区分了。<code>var</code> 对全文的作用域都有效，但 let 对语句块有明显一个作用域的限制，作用域范围只能在语句块（花括号）内。</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><blockquote><p>一般程序语言都会涉及到到内存，因为程序都运行在内存中，但在内存中有分栈堆区，书中也提到了比较详细解释。</p></blockquote><p>ECMAScript 变量可能包含两种不同的数据类型的值： <strong>基本数据类型</strong> 和 <strong>引用数据类型</strong> </p><ul><li>基本类型：简单的数据值。<code>undefined</code>、<code>Null</code> 、<code>Boolean</code> 、<code>Number</code> 、<code>String</code> 、 <code>symbol(new)</code></li><li>引用类型：那些复合数据类型的对象。 <code>Object (Array，Date，RegExp，Function，...)</code> </li></ul><blockquote><p>前方高能，非战斗名族请跳过这段。</p></blockquote><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>借用书中描述</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br></pre></td></tr></table></figure><p>这个翻译成图解就是：<br><img src="base.png" alt="base.png"></p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><blockquote><p>借用书中描述</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">alert(obj2.name); <span class="comment">// "Nicholas"</span></span><br></pre></td></tr></table></figure><p>这个翻译成图解就是：<br><img src="object.png" alt="object.png"></p><h2 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h2><p>笔者能力实在有限，还是先看看书中写的吧。笔者实在没能理解这段话。若有机会等我理解了再回来补补吧。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>书中对没有块级作用域的基本概念和使用都解释的很明确。现在 JavaScript 也新增了一个块作用域的作用。是的这个概念有所颠覆。  </p></blockquote><p>在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。  </p><p><code>ECMAScript 6</code> 之前的 <code>JavaScript</code> 没有 <code>语句块</code> 作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出 <code>5</code>，因为 <code>x</code> 的作用域是声明了 <code>x</code> 的那个函数（或全局范围），而不是 <code>if</code> 语句块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p>如果使用 <code>ECMAScript 6</code> 中的 <code>let</code> 声明，上述行为将发生变化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这个新增的变量声明 <code>let</code> ， 也使得变量的作用域有一定的区别。</p></blockquote><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>书中描述的很详细了。引用书中的描述：<br> <code>JavaScript</code> 具有自动垃圾回收机制，也就是说，执行环境会赋值管理代码执行过程中使用内存。而在<code>C</code> <code>C++</code> 之类的语言中，开发人员的一项基本人任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。在编写 <code>JavaScript</code> 程序时，开发人员不用再关心内存的使用问题，所需要的内存的分配以及无用内存的回收完全实现了自动管理。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="">语法基础和数据类型</a></p><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>笔者惭愧，未能读懂执行环境的作用及其意义，笔者后续学习下。这小节的重点就是搞明白数据类型的值问题。变量的作用域的问题。<br>通过这本书引导，慢慢的开始接触到一个程序语言在实际应用中的语法基础和深入理解。</p>]]></content>
      
      <categories>
          
          <category> professional_javascript_for_web_develop_3rd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript-web-develop-3rd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令行教程（按照工作流程）</title>
      <link href="/20171214/git-command-tutorial/"/>
      <url>/20171214/git-command-tutorial/</url>
      <content type="html"><![CDATA[<blockquote><p>git命令网上和 <code>git --help</code> 都能看到很多。但新手很多情况下都分不清啥时候该用哪个命令，应该用什么命令。接下来提供一套流程想关的命令教程。</p></blockquote><h1 id="git仓库管理"><a href="#git仓库管理" class="headerlink" title="git仓库管理"></a>git仓库管理</h1><p>这里笔者用我的仓库做例子。一般公司开发的时候都无非是如下几个流程。<br><img src="git-chart.png" alt="git-chart.png"></p><blockquote><p>当前流程这个不是一定的，笔者习惯使用这个流程开发代码。</p></blockquote><h2 id="开始（下载代码）"><a href="#开始（下载代码）" class="headerlink" title="开始（下载代码）"></a>开始（下载代码）</h2><p>如果是GitHub上的代码，那么会有 <code>https</code> 或者 <code>SSH</code> 地址，入笔者这里用我的仓库做案例，就可以在GitHub拿到这个链接。</p><table><thead><tr><th>链接方式</th><th>地址</th></tr></thead><tbody><tr><td>https</td><td><a href="https://github.com/yexk/yexk.github.io.git" target="_blank" rel="noopener">https://github.com/yexk/yexk.github.io.git</a></td></tr><tr><td>ssh</td><td><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yexk/yexk.github.io.git</td></tr></tbody></table><p><strong>下载（克隆）代码语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone 地址 </span><br><span class="line"><span class="meta">#</span> eg:</span><br><span class="line">git clone https://github.com/yexk/yexk.github.io.git</span><br></pre></td></tr></table></figure><p>图例：<br><img src="git-clone.png" alt="git-clone.png"></p><p>坐等下载完成，就会出现仓库名称对应的目录，如:笔者用的是 <code>yexk.github.io</code> 仓库，那么就会创建这个目录，我们进到这个目录就可以看到我们仓库地址对应的代码了。</p><p>代码下完了，有时候会涉及到切换分支，<b style="color: red;">注意：这里的切换分支不是必须的。</b>  </p><p><strong>切换分支语法</strong>   </p><blockquote><p>这里分成第一次切换分支，和第二次以后切换分支，</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 第一次切换分支</span><br><span class="line">git checkout -b 分支名称(必须和远程分支的名称一致) 远程分支名称</span><br><span class="line"><span class="meta">#</span> 第二次切换分支</span><br><span class="line">git checkout 分支名称</span><br><span class="line"><span class="meta">#</span> eg：</span><br><span class="line">git checkout -b dev_source origin/dev_source # master-&gt;dev_source</span><br><span class="line">git checkout master                          # dev_source-&gt;master</span><br></pre></td></tr></table></figure><p>第一次切换分支：<br><img src="git-branch-switch.png" alt="git-branch-switch.png"></p><blockquote><p>如果第二次还执行该命令会提示：<br><code>fatal: A branch named &#39;dev_source&#39; already exists.</code></p></blockquote><p>第二次以后切换分支：<br><img src="git-branch-switch-2.png" alt="git-branch-switch-2.png"></p><blockquote><p>同上，如果在当前分支继续切换到当前分支会有提示：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Already on 'master'</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br></pre></td></tr></table></figure></p></blockquote><p>提到分支，那就不得不提一下分支的删除和查看了，新增和切换分支差不多。</p><table><thead><tr><th>方法</th><th>命令</th></tr></thead><tbody><tr><td>新增</td><td><code>git branch 分支名称</code></td></tr><tr><td>删除</td><td><code>git branch -d 分支名称</code></td></tr><tr><td>查看</td><td><code>git branch -a</code>(查看本地和远程) <br>或 <code>git branch</code>(只查看本地分支)</td></tr></tbody></table><h2 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h2><blockquote><p>笔者认为这一步很有必要存在，虽然不是必须的，但为了保持不影响其他人提交好的代码，养成一个好习惯会比较好。</p></blockquote><p>更新代码的语法：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h2 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h2><blockquote><p>谁都不想自己辛辛苦苦写的代码还到最后提交不了，但工作难免会遇到。如果是个人仓库，这一步就可以跳过了。自己开发很难冲突的，如果能冲突，那说明也是牛X。</p></blockquote><p>一般冲突了会出现 <code>CONFLICT</code> 相关的字样。那这个时候就要处理冲突问题了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">xxxxaaa   # 这是来自当前版本的修改</span><br><span class="line">=======</span><br><span class="line">xxxx      # 这是更新下来的修改</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; master</span><br></pre></td></tr></table></figure></p><p>我们手动编辑、保存。保持代码的原有功能。</p><blockquote><p>冲突的情况还是有很多种情况，但总体的流程都是差不多的：修改冲突文件 -&gt; 添加冲突文件 -&gt; 提交。</p></blockquote><h2 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h2><blockquote><p>我们修改好的代码需要添加到缓存区。只有添加到缓存区的代码才能够被提交。</p></blockquote><p><strong>添加代码</strong><br>添加代码前我怎么知道我有什么代码被修改了呢？<br><strong>查看修改代码</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p><p>图例：<br><img src="git-status.png" alt="git-status.png"></p><blockquote><p>这里面就可以看到我们修改好的文件信息了。这里有两个新增的文件分别是 <code>demo.md</code> 和 <code>demo1.md</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加文件。单个或者多个，用空格隔开就行。</span><br><span class="line">git add 文件名称    </span><br><span class="line"><span class="meta">#</span> 添加所有修改的文件。</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> eg:</span><br><span class="line">git add demo.md demo1.md</span><br><span class="line"><span class="meta">#</span> or</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>图例：<br><img src="git-add.png" alt="git-add.png"></p><blockquote><p>已经把代码添加到缓冲区了，接下来就只负责提交代码就好了。</p></blockquote><h2 id="提交代码（提交到本地）"><a href="#提交代码（提交到本地）" class="headerlink" title="提交代码（提交到本地）"></a>提交代码（提交到本地）</h2><blockquote><p>git 是多服务器机制。会先把代码提交到本地。如果是团队开发，这一步代码仅仅是把代码提交到了自己的本地的服务器上，别人是看不见的。需要再推送到远程服务器才是真正的提交完成。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>图例：<br><img src="git-commit.gif" alt="git-commit.gif"></p><blockquote><p>提交代码有点类似于编辑一个提交文件，把需要的信息写到文件保存退出就可以提交成功了。</p></blockquote><h2 id="提交到远程服务器"><a href="#提交到远程服务器" class="headerlink" title="提交到远程服务器"></a>提交到远程服务器</h2><p>当提交本地服务器以后就直接提交到远程服务器就可以了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></p><blockquote><p>直接执行提交就行。这一步冲突的概率比较小，如果冲突了就回去解决冲突，重新来一步就行。</p></blockquote><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此git仓库简单的管理流程就算走完了。提交完成了后需要查看提交记录可以用这个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline --all --graph --decorate</span><br></pre></td></tr></table></figure><p>图例：<br><img src="git-log.png" alt="git-log.png"></p><blockquote><p>git知道这些命令就差不多可以应对工作场景了，再遇到其他问题再通过其他问题继续搜索解决就行。</p></blockquote>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习 ES2015</title>
      <link href="/20171214/learn-es2015/"/>
      <url>/20171214/learn-es2015/</url>
      <content type="html"><![CDATA[<blockquote><p><strong> es6功能 </strong><br>这份文档最初来自于 Luke Hoban 的优秀仓库 <a href="https://git.io/es6features" target="_blank" rel="noopener">es6features</a>。 在Github上给个star吧!</p></blockquote><blockquote><p><strong> 交互式编程环境 </strong><br>请务必在网上亲自<a href="/repl">试验</a>这些功能。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>ECMAScript 2015 是2015年6月被批准的ECMAScript标准。   </p></blockquote><p>ES2015 是语言的一次重大更新，也是自2009年ES5标准确定后的第一个重大更新，目前主流的JavaScript引擎中的实现进展<a href="https://kangax.github.io/es5-compat-table/es6/" target="_blank" rel="noopener">在这里</a>。    </p><p>查看 <a href="http://www.ecma-international.org/ecma-262/6.0/index.html" target="_blank" rel="noopener">ES2015版本的完整规范</a></p><h2 id="ECMAScript-2015-功能"><a href="#ECMAScript-2015-功能" class="headerlink" title="ECMAScript 2015 功能"></a>ECMAScript 2015 功能</h2><!-- To not break some existing links to here, just in case. --><p><a id="arrows"></a></p><h3 id="箭头函数与this语法-Arrows-and-Lexical-This"><a href="#箭头函数与this语法-Arrows-and-Lexical-This" class="headerlink" title="箭头函数与this语法(Arrows and Lexical This)"></a>箭头函数与this语法(Arrows and Lexical This)</h3><p>箭头函数用 <code>=&gt;</code> 来代表一个函数，语法上类似于C#, Java8和CoffeeScript中的相关特性。他同时支持表达式（Expression bodies）和语句（Statement bodies）的写法。值得注意的是，与一般的函数不同，箭头函数与包裹它的代码共享相同的<code>this</code>对象，如果箭头函数在其他函数的内部，它也将共享该函数的<code>arguments</code>变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表达式写法 Expression bodies</span></span><br><span class="line"><span class="keyword">var</span> odds = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> nums = evens.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语句写法 Statement bodies</span></span><br><span class="line">nums.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (v % <span class="number">5</span> === <span class="number">0</span>)</span><br><span class="line">    fives.push(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  this 对象</span></span><br><span class="line"><span class="keyword">var</span> bob = &#123;</span><br><span class="line">  _name: <span class="string">"Bob"</span>,</span><br><span class="line">  _friends: [],</span><br><span class="line">  printFriends() &#123;</span><br><span class="line">    <span class="keyword">this</span>._friends.forEach(<span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>._name + <span class="string">" knows "</span> + f));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> example = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> numbers = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">      numbers.push(number * number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numbers;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> example();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square(<span class="number">2</span>, <span class="number">4</span>, <span class="number">7.5</span>, <span class="number">8</span>, <span class="number">11.5</span>, <span class="number">21</span>); <span class="comment">// returns: [4, 16, 56.25, 64, 132.25, 441]</span></span><br></pre></td></tr></table></figure><h3 id="类-Classes"><a href="#类-Classes" class="headerlink" title="类(Classes)"></a>类(Classes)</h3><p>ES2015的类只是一个语法糖，通过class关键字让语法更接近传统的面向对象模式，本质上还是基于原型的。使用单一便捷的声明格式，使得类使用起来更方便，也更具互操作性。类支持基于原型的继承，调用父类的构造函数，生成实例，静态方法和构造函数。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkinnedMesh</span> <span class="keyword">extends</span> <span class="title">THREE</span>.<span class="title">Mesh</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(geometry, materials) &#123;</span><br><span class="line">    <span class="comment">// 调用父类的构造函数 super是父类的实例</span></span><br><span class="line">    <span class="keyword">super</span>(geometry, materials);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.idMatrix = SkinnedMesh.defaultMatrix();</span><br><span class="line">    <span class="keyword">this</span>.bones = [];</span><br><span class="line">    <span class="keyword">this</span>.boneMatrices = [];</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  update(camera) &#123;</span><br><span class="line">    <span class="comment">//调用this.update()</span></span><br><span class="line">    <span class="keyword">super</span>.update();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> defaultMatrix() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.Matrix4();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强的对象字面量-Enhanced-Object-Literals"><a href="#增强的对象字面量-Enhanced-Object-Literals" class="headerlink" title="增强的对象字面量(Enhanced Object Literals)"></a>增强的对象字面量(Enhanced Object Literals)</h3><p>经扩展后的对象字面量，允许在结构中设置原型，简化了<code>foo: foo</code>这样的赋值，定义方法和调用父级。这样使得对象字面量更接近类的声明，并且使得基于对象的设计更加方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// 设置 prototype</span></span><br><span class="line">    __proto__: theProtoObj,</span><br><span class="line">    <span class="comment">// 计算属性不会重复设置__proto__，或者将直接触发错误。</span></span><br><span class="line">    [<span class="string">'__proto__'</span>]: somethingElse,</span><br><span class="line">    <span class="comment">// ‘handler: handler’ 简写</span></span><br><span class="line">    handler,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    toString() &#123;</span><br><span class="line">     <span class="comment">// 调用父级方法</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">"d "</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置动态的属性名</span></span><br><span class="line">    [ <span class="string">"prop_"</span> + <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="number">42</span>)() ]: <span class="number">42</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>__proto__</code> 需要原生支持, 并且在 之前的ECMAScript 版本中已被弃用。虽然现在大多数引擎支持, 但是 <a href="https://kangax.github.io/compat-table/es6/#__proto___in_object_literals" target="_blank" rel="noopener">仍有些引擎</a>是不支持的。另外，值得注意的是，如同<a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.prototype.__proto__" target="_blank" rel="noopener">附录 B</a>所示，只有 <a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-additional-ecmascript-features-for-web-browsers" target="_blank" rel="noopener">web 浏览器</a> 仍然需要支持该属性。在node中已经被支持。</p></blockquote><h3 id="模版字符串-Template-Strings"><a href="#模版字符串-Template-Strings" class="headerlink" title="模版字符串(Template Strings)"></a>模版字符串(Template Strings)</h3><p>模版字符串提供了构建字符串的语法糖，类似于Perl，Python等语言中的字符串插值。可以构建一个自定义标签，避免注入攻击或者从字符串内容中构建更加高级的数据结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建基本的模板字符串</span></span><br><span class="line"><span class="string">`This is a pretty little template string.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串</span></span><br><span class="line"><span class="string">`In ES5 this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用转义</span></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`In ES5 "\n" is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个HTTP请求头的模版字符串，通过替换内容来构建请求</span></span><br><span class="line">GET<span class="string">`http://foo.org/bar?a=<span class="subst">$&#123;a&#125;</span>&amp;b=<span class="subst">$&#123;b&#125;</span></span></span><br><span class="line"><span class="string">    Content-Type: application/json</span></span><br><span class="line"><span class="string">    X-Credentials: <span class="subst">$&#123;credentials&#125;</span></span></span><br><span class="line"><span class="string">    &#123; "foo": <span class="subst">$&#123;foo&#125;</span>,</span></span><br><span class="line"><span class="string">      "bar": <span class="subst">$&#123;bar&#125;</span>&#125;`</span>(myOnReadyStateChangeHandler);</span><br></pre></td></tr></table></figure><h3 id="解构-Destructuring"><a href="#解构-Destructuring" class="headerlink" title="解构(Destructuring)"></a>解构(Destructuring)</h3><p>解构允许使用模式匹配的方式进行绑定，并支持匹配<br>数组和对象。解构具有一定的容错机制，就像查找普通对象<code>foo[&#39;foo&#39;]</code>这样，当没有找到时会返回<code>undefined</code>（而不会直接报错）。<br><br></p><blockquote class="babel-callout babel-callout-warning"><br>译者注：当上层结构都不存在时，解构是会报错的，如 <code>const [{id: id}] = []</code> ，解构数组为空，导致整个obj为 <code>undefined</code> ，此时再去找 <code>obj.id</code> 就会报错。<br></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表（数组）匹配</span></span><br><span class="line"><span class="keyword">var</span> [a, , b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象匹配</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">op</span>: a, <span class="attr">lhs</span>: &#123; <span class="attr">op</span>: b &#125;, <span class="attr">rhs</span>: c &#125;</span><br><span class="line">       = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象匹配的简写</span></span><br><span class="line"><span class="comment">// 绑定当前作用域的 `op`, `lhs` 和 `rhs`</span></span><br><span class="line"><span class="keyword">var</span> &#123;op, lhs, rhs&#125; = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用在函数的参数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">&#123;name: x&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">g(&#123;<span class="attr">name</span>: <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构容错机制</span></span><br><span class="line"><span class="keyword">var</span> [a] = [];</span><br><span class="line">a === <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带默认值的解构容错</span></span><br><span class="line"><span class="keyword">var</span> [a = <span class="number">1</span>] = [];</span><br><span class="line">a === <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构 + 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">&#123;x, y, w = <span class="number">10</span>, h = <span class="number">10</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + w + h;</span><br><span class="line">&#125;</span><br><span class="line">r(&#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">2</span>&#125;) === <span class="number">23</span></span><br></pre></td></tr></table></figure><h3 id="默认参数-Default-不定参数-Rest-扩展运算符-Spread"><a href="#默认参数-Default-不定参数-Rest-扩展运算符-Spread" class="headerlink" title="默认参数(Default) + 不定参数(Rest) + 扩展运算符(Spread)"></a>默认参数(Default) + 不定参数(Rest) + 扩展运算符(Spread)</h3><p>默认参数(default)的功能是在函数被调用时对参数做自动估值(若没被赋值，则自动赋值)，扩展运算符(spread)则可以将数组转换为连续的函数参数，不定参数(rest)用在参数末尾，将最末尾的参数转换为数组。不定参数(rest)让我们不再需要<code>arguments</code>，更直接地解决了一些常见的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y=<span class="number">12</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果没有传入y或传入了undefined，y的默认值为12</span></span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>) == <span class="number">15</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, ...y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// y是一个数组</span></span><br><span class="line">  <span class="keyword">return</span> x * y.length;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>, <span class="string">"hello"</span>, <span class="literal">true</span>) == <span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将数组中的每个元素展开为函数参数</span></span><br><span class="line">f(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) == <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="Let-定义变量-Const-定义常量"><a href="#Let-定义变量-Const-定义常量" class="headerlink" title="Let(定义变量) + Const(定义常量)"></a>Let(定义变量) + Const(定义常量)</h3><p>这两个关键字具有块级作用域。<code>let</code>是<code>var</code>的升级版。<code>const</code>仅允许被赋值一次，通过静态限制（Static restrictions ）的方式阻止变量在赋值前被使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> x;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 这是正确的，因为const具有块级作用域</span></span><br><span class="line">      <span class="keyword">const</span> x = <span class="string">"sneaky"</span>;</span><br><span class="line">      <span class="comment">// 错误，"x"已被定义为const常量，不允许再赋值</span></span><br><span class="line">      x = <span class="string">"foo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这是正确的，因为这里的"x"是被let定义的</span></span><br><span class="line">    x = <span class="string">"bar"</span>;</span><br><span class="line">    <span class="comment">// 错误，"x"已经被定义，不允许再重复定义</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"inner"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代器-Iterators-For-Of循环"><a href="#迭代器-Iterators-For-Of循环" class="headerlink" title="迭代器(Iterators) + For..Of循环"></a>迭代器(Iterators) + For..Of循环</h3><p>ES6中的迭代器对象允许像 CLR(Common Language Runtime)的IEnumerable 接口或者 Java 的 Iterable 一样创建自定义迭代器，可以将<code>for..in</code>这种遍历模式更加一般化为<code>for..of</code>的形式。它是支持惰性模式的，不需要真正实现一个数组（只需要实现Iterator接口），就像LINQ语言那样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现斐波那契数列的迭代器</span></span><br><span class="line"><span class="keyword">let</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        [pre, cur] = [cur, pre + cur];</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// 循环将在n &gt; 1000 时结束</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器还可以基于”鸭子类型”来实现（使用<a href="http://typescriptlang.org" target="_blank" rel="noopener">TypeScript</a> 这种基于类型的语法来说明）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IteratorResult &#123;</span><br><span class="line">  done: <span class="built_in">boolean</span>;</span><br><span class="line">  value: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Iterator &#123;</span><br><span class="line">  next(): IteratorResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Iterable &#123;</span><br><span class="line">  [Symbol.iterator](): Iterator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="通过-polyfill-支持"><a href="#通过-polyfill-支持" class="headerlink" title="通过 polyfill 支持"></a>通过 <code>polyfill</code> 支持</h4><p>为了使用迭代器你必须引入Babel的 <a href="/docs/usage/polyfill">polyfill</a>.</p></blockquote><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>Generator通过使用<code>function*</code>和<code>yield</code>关键字简化了迭代器的编写。通过<code>function*</code>声明的函数会返回一个Generators实例。Generator可以看做是迭代器的子类，包含了额外的<code>next</code>和<code>throw</code>方法。这些特性可以让得到的结果值再传回Generator，因此<code>yield</code>是一个具有返回值（或抛出一个值）的表达式。</p><p>注意：Generator也可以用于使用‘await’这样的异步编程中，详见ES7 <code>await</code> <a href="https://github.com/lukehoban/ecmascript-asyncawait" target="_blank" rel="noopener">协议</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = pre;</span><br><span class="line">      pre = cur;</span><br><span class="line">      cur += temp;</span><br><span class="line">      <span class="keyword">yield</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Generator 接口 (使用<a href="http://typescriptlang.org" target="_blank" rel="noopener">TypeScript</a> 这种基于类型的语法来说明):</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Generator <span class="keyword">extends</span> Iterator &#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult;</span><br><span class="line">    <span class="keyword">throw</span>(exception: <span class="built_in">any</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="通过-polyfill-支持-1"><a href="#通过-polyfill-支持-1" class="headerlink" title="通过 polyfill 支持"></a>通过 <code>polyfill</code> 支持</h4><p>为了使用迭代器你必须引入Babel的 <a href="/docs/usage/polyfill">polyfill</a>.</p></blockquote><h3 id="Comprehensions-Generator推导式"><a href="#Comprehensions-Generator推导式" class="headerlink" title="Comprehensions(Generator推导式)"></a>Comprehensions(Generator推导式)</h3><p>Babel 6.0 移除了。</p><p>(译者注：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions" target="_blank" rel="noopener">Generator Comprehensions</a>在14年8月27号修订中被移除了，不属于标准语法。)</p><h3 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h3><p>ES6 加强了对 Unicode 的支持，包括新的unicode表示法，正则表达式的<code>u</code>模式来匹配码点（code points），也提供新的API去处理21位的码点（code points）。这些新特性允许我们使用JavaScript构建国际化的应用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和ES5.1相同</span></span><br><span class="line"><span class="string">"𠮷"</span>.length == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式新的u模式</span></span><br><span class="line"><span class="string">"𠮷"</span>.match(<span class="regexp">/./u</span>)[<span class="number">0</span>].length == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的unicode表示法</span></span><br><span class="line"><span class="string">"\u&#123;20BB7&#125;"</span> == <span class="string">"𠮷"</span> == <span class="string">"\uD842\uDFB7"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的字符串方法</span></span><br><span class="line"><span class="string">"𠮷"</span>.codePointAt(<span class="number">0</span>) == <span class="number">0x20BB7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for of迭代码点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> c <span class="keyword">of</span> <span class="string">"𠮷"</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块-Modules"><a href="#模块-Modules" class="headerlink" title="模块(Modules)"></a>模块(Modules)</h3><p>ES6从语言层面对模块进行了支持。编写方式借鉴了流行的JavaScript模块加载器（AMD, CommonJS）。由宿主环境的默认加载器定义模块运行时的行为，采取隐式异步模式——在模块可以被获取和加载前不会有代码执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + math.sum(math.pi, math.pi));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// otherApp.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum, pi&#125; <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + sum(pi, pi));</span><br></pre></td></tr></table></figure><p>还有的功能包括：<code>export default</code> and <code>export *</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/mathplusplus.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> exp, &#123;pi, e&#125; <span class="keyword">from</span> <span class="string">"lib/mathplusplus"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"e^π = "</span> + exp(pi));</span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-info"><br>  <h4>模块的格式：</h4><br>  <p><br>    Babel可以将ES2015的模块转换为一下几种格式：Common.js，AMD，System，以及UMD。你甚至可以创建你自己的方式。详见<a href="/docs/plugins/">模块文档</a>.<br>  </p><br></blockquote><h3 id="模块加载器-Module-Loaders"><a href="#模块加载器-Module-Loaders" class="headerlink" title="模块加载器(Module Loaders)"></a>模块加载器(Module Loaders)</h3><blockquote class="babel-callout babel-callout-warning"><br>  <h4>非ES2015部分</h4><br>  <p><br>    这并不是ES2015的一部分：这部分ECMAScript 2015规范是由实现定义（implementation-defined）的。最终的标准将在WHATWG的<a href="https://whatwg.github.io/loader/" target="_blank" rel="noopener">Loader 规范</a>中确定，目前这项工作正在进行中，下面的内容来自于之前的ES2015草稿。<br>  </p><br></blockquote><p>模块加载器支持以下功能：</p><ul><li>动态加载（Dynamic loading）</li><li>状态一致性（State isolation）</li><li>全局空间一致性（Global namespace isolation）</li><li>编译钩子（Compilation hooks）</li><li>嵌套虚拟化（Nested virtualization）</li></ul><p>你可以对默认的加载器进行配置，构建出新的加载器，可以被加载于独立或受限的执行环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态加载 – ‘System’ 是默认的加载器</span></span><br><span class="line">System.import(<span class="string">"lib/math"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"2π = "</span> + m.sum(m.pi, m.pi));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建执行沙箱 – new Loaders</span></span><br><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> Loader(&#123;</span><br><span class="line">  global: fixup(<span class="built_in">window</span>) <span class="comment">// replace ‘console.log’</span></span><br><span class="line">&#125;);</span><br><span class="line">loader.eval(<span class="string">"console.log(\"hello world!\");"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接操作模块的缓存</span></span><br><span class="line">System.get(<span class="string">"jquery"</span>);</span><br><span class="line">System.set(<span class="string">"jquery"</span>, Module(&#123;<span class="attr">$</span>: $&#125;)); <span class="comment">// WARNING: not yet finalized</span></span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-warning"><br>  <h4>需要额外的polyfill</h4><br>  <p><br>    由于Babel默认使用common.js的模块，你需要一个polyfill来使用加载器API。<br>    <a href="https://github.com/ModuleLoader/es6-module-loader" target="_blank" rel="noopener">点击获取</a>.<br>  </p><br></blockquote><blockquote class="babel-callout babel-callout-info"><br>  <h4>使用模块加载器</h4><br>  <p><br>    为了使用此功能，你需要告诉Babel使用 <code>system</code> 模块格式化工具。在此查看<br>    <a href="https://github.com/systemjs/systemjs" target="_blank" rel="noopener">System.js</a><br>  </p><br></blockquote><h3 id="Map-Set-WeakMap-WeakSet"><a href="#Map-Set-WeakMap-WeakSet" class="headerlink" title="Map + Set + WeakMap + WeakSet"></a>Map + Set + WeakMap + WeakSet</h3><p>为常见算法的实现提供了更有效的数据结构。WeakMaps提供了对对象的弱引用（不会被垃圾回收计数）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sets</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">"hello"</span>).add(<span class="string">"goodbye"</span>).add(<span class="string">"hello"</span>);</span><br><span class="line">s.size === <span class="number">2</span>;</span><br><span class="line">s.has(<span class="string">"hello"</span>) === <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maps</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">"hello"</span>, <span class="number">42</span>);</span><br><span class="line">m.set(s, <span class="number">34</span>);</span><br><span class="line">m.get(s) == <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Weak Maps</span></span><br><span class="line"><span class="keyword">var</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(s, &#123; <span class="attr">extra</span>: <span class="number">42</span> &#125;);</span><br><span class="line">wm.size === <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Weak Sets</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(&#123; <span class="attr">data</span>: <span class="number">42</span> &#125;);</span><br><span class="line"><span class="comment">// 由于传入的对象没有其他引用，故将不会被set保存。</span></span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-info"><br>  <h4>需要polyfill支持</h4><br>  <p><br>    为了在所有环境下使用Maps，Sets，WeakMaps和WeakSets，你需要使用Babel的 <a href="/docs/usage/polyfill">polyfill</a>.<br>  </p><br></blockquote><h3 id="Proxies-代理对象"><a href="#Proxies-代理对象" class="headerlink" title="Proxies(代理对象)"></a>Proxies(代理对象)</h3><p>Proxies允许创建一个可以全范围控制宿主对象行为的对象，可用于拦截，对象的虚拟化，日志记录/性能分析等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理普通对象</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">receiver, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">p.world === <span class="string">"Hello, world!"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理函数对象</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"I am the target"</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params">receiver, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"I am the proxy"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">p() === <span class="string">"I am the proxy"</span>;</span><br></pre></td></tr></table></figure><p>下面是完全在运行态的元操作（meta-operations）中可能出现的trap：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// target.prop</span></span><br><span class="line">  get: ...,</span><br><span class="line">  <span class="comment">// target.prop = value</span></span><br><span class="line">  set: ...,</span><br><span class="line">  <span class="comment">// 'prop' in target</span></span><br><span class="line">  has: ...,</span><br><span class="line">  <span class="comment">// delete target.prop</span></span><br><span class="line">  deleteProperty: ...,</span><br><span class="line">  <span class="comment">// target(...args)</span></span><br><span class="line">  apply: ...,</span><br><span class="line">  <span class="comment">// new target(...args)</span></span><br><span class="line">  construct: ...,</span><br><span class="line">  <span class="comment">// Object.getOwnPropertyDescriptor(target, 'prop')</span></span><br><span class="line">  getOwnPropertyDescriptor: ...,</span><br><span class="line">  <span class="comment">// Object.defineProperty(target, 'prop', descriptor)</span></span><br><span class="line">  defineProperty: ...,</span><br><span class="line">  <span class="comment">// Object.getPrototypeOf(target), Reflect.getPrototypeOf(target),</span></span><br><span class="line">  <span class="comment">// target.__proto__, object.isPrototypeOf(target), object instanceof target</span></span><br><span class="line">  getPrototypeOf: ...,</span><br><span class="line">  <span class="comment">// Object.setPrototypeOf(target), Reflect.setPrototypeOf(target)</span></span><br><span class="line">  setPrototypeOf: ...,</span><br><span class="line">  <span class="comment">// for (let i in target) &#123;&#125;</span></span><br><span class="line">  enumerate: ...,</span><br><span class="line">  <span class="comment">// Object.keys(target)</span></span><br><span class="line">  ownKeys: ...,</span><br><span class="line">  <span class="comment">// Object.preventExtensions(target)</span></span><br><span class="line">  preventExtensions: ...,</span><br><span class="line">  <span class="comment">// Object.isExtensible(target)</span></span><br><span class="line">  isExtensible :...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-danger"><br>  <h4>不支持的特性</h4><br>  <p><br>    由于ES5的局限性，Proxies无法被转换或者通过polyfill兼容，查看<a href="https://kangax.github.io/compat-table/es6/#test-Proxy" target="_blank" rel="noopener">不同JavaScript引擎</a>.<br>  </p><br></blockquote><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>Symbol对对象的状态进行访问控制。Symbol允许对象的属性不仅可以通过<code>string（ES5）</code>命名，还可以通过<code>symbol</code>命名。<code>symbol</code>是一种基本数据类型。可选的<code>name</code>参数用于调试——但并不是他本身的一部分。Symbol是唯一的，但不是私有的，因为他们使用诸如<code>Object.getOwnPropertySymbols</code>这样的方法来使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块内的 symbol</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="built_in">Symbol</span>(<span class="string">"key"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params">privateData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = privateData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MyClass.prototype = &#123;</span><br><span class="line">    doStuff: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ... this[key] ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bable只能有限支持，完全支持需要原生实现</span></span><br><span class="line">  <span class="keyword">typeof</span> key === <span class="string">"symbol"</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> MyClass(<span class="string">"hello"</span>)</span><br><span class="line">c[<span class="string">"key"</span>] === <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-info"><br>  <h4>通过polyfill部分实现：</h4><br>  <p><br>    通过Babel的<a href="/docs/usage/polyfill">polyfill</a>.部分实现。由于语言的限制，部分功能不能转换或通过polyfill兼容。您可以查看code.js的 <a href="https://github.com/zloirock/core-js#caveats-when-using-symbol-polyfill" target="_blank" rel="noopener">注意事项</a> 获取更多信息.<br>  </p><br></blockquote><h3 id="可以被继承-子类化-的内建对象-Subclassable-Built-ins"><a href="#可以被继承-子类化-的内建对象-Subclassable-Built-ins" class="headerlink" title="可以被继承(子类化)的内建对象(Subclassable Built-ins)"></a>可以被继承(子类化)的内建对象(Subclassable Built-ins)</h3><p>在ES2015中，可以创建内建对象如<code>Array</code>，<code>Date</code>以及<code>DOMElement</code>的子类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Array的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args) &#123; <span class="keyword">super</span>(...args); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MyArray();</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">12</span>;</span><br><span class="line">arr.length == <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-warning"><br>  <h4>部分支持</h4><br>  <p><br>    部分支持：由于ES5引擎的限制，可以创建HTMLElement的子类，但不能创建诸如Array，Date和Error等对象的子类。<br>  </p><br></blockquote><h3 id="Math-Number-String-Object-APIs"><a href="#Math-Number-String-Object-APIs" class="headerlink" title="Math + Number + String + Object APIs"></a>Math + Number + String + Object APIs</h3><p>新增很多功能，如核心的Math库，数组转换和用于对象复制的Object.assign()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON</span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"NaN"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.acosh(<span class="number">3</span>) <span class="comment">// 1.762747174039086</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.imul(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">1</span>, <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="string">"abcde"</span>.includes(<span class="string">"cd"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="string">"abc"</span>.repeat(<span class="number">3</span>) <span class="comment">// "abcabcabc"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>)) <span class="comment">// Returns a real Array</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// Similar to new Array(...), but without special one-arg behavior</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>].fill(<span class="number">7</span>, <span class="number">1</span>) <span class="comment">// [0,7,7]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x == <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].entries() <span class="comment">// iterator [0, "a"], [1,"b"], [2,"c"]</span></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].keys() <span class="comment">// iterator 0, 1, 2</span></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].values() <span class="comment">// iterator "a", "b", "c"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Point, &#123; <span class="attr">origin</span>: <span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">0</span>) &#125;)</span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-warning"><br>  <h4>通过polyfill有限的支持</h4><br>  <p><br>    上述许多API都通过polyfill进行了支持，但是部分特性由于多种原因没有被实现（如，String.prototype.normalize需要编写大量额外的代码来实现），你可以在<br>    <a href="https://github.com/addyosmani/es6-tools#polyfills" target="_blank" rel="noopener">这里</a>找到更多的polyfill。<br>  </p><br></blockquote><h3 id="二进制和八进制字面量"><a href="#二进制和八进制字面量" class="headerlink" title="二进制和八进制字面量"></a>二进制和八进制字面量</h3><p>新增两种数字字面量：二进制<code>b</code>和八进制<code>o</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b111110111</span> === <span class="number">503</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0o767</span> === <span class="number">503</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-warning"><br>  <h4>仅支持字面模式</h4><br>  <p><br>    Babel仅可以转换0o767，并不能转换Number(“0o767”)。<br>  </p><br></blockquote><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p>Promises是一种异步编程的方式。Promises在将来可能会得到支持。目前很多的JavaScript库都使用了Promises。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">duration = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(resolve, duration);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = timeout(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"hmm"</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([timeout(<span class="number">100</span>), timeout(<span class="number">200</span>)]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-info"><br>  <h4>通过polyfill</h4><br>  <p><br>    要使用Promises，你需要引入Babel的 <a href="/docs/usage/polyfill">polyfill</a>.<br>  </p><br></blockquote><h3 id="Reflect-API"><a href="#Reflect-API" class="headerlink" title="Reflect API"></a>Reflect API</h3><p>完整的Reflect API暴露在对象的运行级元操作上。它可以用来有效地还原Proxy API，并允许调用相应的proxy traps，尤其是在执行proxies时非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> O = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(O, <span class="string">'b'</span>, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;);</span><br><span class="line">O[<span class="built_in">Symbol</span>(<span class="string">'c'</span>)] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(O); <span class="comment">// ['a', 'b', Symbol(c)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.c = a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="built_in">Reflect</span>.construct(C, [<span class="number">20</span>, <span class="number">22</span>]);</span><br><span class="line">instance.c; <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-info"><br>  <h4>通过polyfill</h4><br>  <p><br>    要使用Reflect API，你需要引入Babel的 <a href="/docs/usage/polyfill">polyfill</a>.<br>  </p><br></blockquote><h3 id="Tail-Calls-尾调用"><a href="#Tail-Calls-尾调用" class="headerlink" title="Tail Calls(尾调用)"></a>Tail Calls(尾调用)</h3><p>尾递归调用可以保证调用栈不会无限增长，使得在无界输入的情况下，递归算法是安全的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, acc = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> acc;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * acc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在绝大多数JS引擎中运行这段代码会导致栈溢出</span></span><br><span class="line"><span class="comment">// 但是在ES2015中，即便输入很随意也可以安全运行</span></span><br><span class="line">factorial(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><blockquote class="babel-callout babel-callout-warning"><br>  <h4>已经被bable6移除</h4><br>  <p><br>    该特性仅支持直接对自身引用的递归。由于功能本身的复杂性和表现冲突，使得该特性无法在全局下支持。<br>    移除是因为还有其他bug产生，它会被重新实现。<br>  </p><br></blockquote>]]></content>
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES2015 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript高级程序设计第三版（读后感）（第三篇）</title>
      <link href="/20171210/professional-javascript-for-web-3-3/"/>
      <url>/20171210/professional-javascript-for-web-3-3/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript高级程序设计第三版（读后感）（第三篇）"><a href="#JavaScript高级程序设计第三版（读后感）（第三篇）" class="headerlink" title="JavaScript高级程序设计第三版（读后感）（第三篇）"></a>JavaScript高级程序设计第三版（读后感）（第三篇）</h1><blockquote><p>在上一篇中，讲了JavaScript的使用方式（引用方式）。总得来说无非就是 <code>script</code> 标签和脚本的引用。接下来继续读第三章，这一章开始讲述了 <code>JavaScript</code> 基础语法，这个还好，<code>JavaScript</code> 是一个弱类型的语言。借鉴的 <code>Java</code> 和 <code>c</code> 等高级语言的语法。使得其他编程语言上手也不算有难度。  </p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>和众多编程一样，有 <code>区分大小写</code> 、<code>关键字</code> 、 <code>标识符</code> 等规则。但和 <code>Java</code> 、<code>C</code> 不一样的是这门语言没有那么严格的变量类型。也就意味着一个变量可以存放任何东西，这点和 <code>PHP</code> 类似，</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>第一个字符必须是一个<code>字母</code>、<code>下划线（_）</code>或者一个<code>美元符号（$）</code>;</li><li>其他字符可以是<code>字母</code>、<code>下划线</code>、<code>美元符号</code>或者<code>数字</code>。</li><li>标识符的字母也可以包含扩展的 <code>ASCII</code> 或 <code>Unicode</code> 字母字符。</li></ul><blockquote><p>按照惯例，<code>ECMAScript</code> 标识符采用<code>小驼峰</code>的命名方式。也推荐其标识符的时候使用<code>小驼峰</code>的形式。</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JavaScript有三种声明。</p><ul><li><code>var</code><br>  声明一个变量，可选择将其初始化为一个值。</li><li><code>let</code><br>  声明一个块作用域的局部变量(block scope local variable)，可选择将其初始化为一个值。</li><li><code>const</code><br>  声明一个只读的常量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a ;</span><br><span class="line"><span class="comment">// a 的值是 undefined </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'Yexk'</span>; </span><br><span class="line"><span class="comment">// a 的值是 Yexk</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="comment">// a 的值是 undefined </span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">0.125</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>var</code> 和 <code>let</code> 在同一个脚本下并无很大的区别，但在有 ‘{}’ 花括号中有作用域的区别，这个在下章节会详细提到。 <code>const</code> 这个变量一旦声明就不能重新赋值。若尝试对其进行赋值会抛出异常： <code>Uncaught TypeError: Assignment to constant variable.</code></p></blockquote><h2 id="数据类型（7种）"><a href="#数据类型（7种）" class="headerlink" title="数据类型（7种）"></a>数据类型（7种）</h2><p>JavaScript语言可以识别下面 7 种不同类型的值：</p><p>六种 <code>原型</code> 数据类型（基本数据类型）:</p><ul><li><code>Boolean</code> .  布尔值，<code>true</code> 和 <code>false</code>.</li><li><code>null</code> . 一个表明 <code>null</code> 值的特殊关键字。 <code>JavaScript</code> 是大小写敏感的，因此 <code>null</code> 与 <code>Null</code>、<code>NULL</code>或其他变量完全不同。</li><li><code>undefined</code> .  变量未定义时的属性。</li><li><code>Number</code> .  表示数字，例如： <code>42</code> 或者 <code>3.14159</code>。</li><li><code>String</code> .  表示字符串，例如：<code>&quot;Howdy&quot;</code></li><li><code>Symbol</code> . ( 在 <code>ECMAScript 6</code> 中新添加的类型)。一种数据类型，它的实例是唯一且不可改变的。</li></ul><p>以及 <code>Object</code> 对象（复合数据类型）。</p><h2 id="操作符（运算符）"><a href="#操作符（运算符）" class="headerlink" title="操作符（运算符）"></a>操作符（运算符）</h2><p>JavaScript 拥有如下类型的运算符。书中详细的描述了运算符和运算符的优先级。</p><ul><li>赋值运算符(Assignment operators)</li><li>比较运算符(Comparison operators)</li><li>算数运算符(Arithmetic operators)</li><li>位运算符(Bitwise operators)</li><li>逻辑运算符(Logical operators)</li><li>字符串运算符(String operators)</li><li>条件（三元）运算符(Conditional operator)</li><li>逗号运算符(Comma operator)</li><li>一元运算符(Unary operators)</li><li>关系运算符(Relational operator)</li></ul><p>其他的运算符合别的语言都没有很大的区别。这里笔者想提一下 <code>一元运算符(Unary operators)</code> ，这个算是 <code>JavaScript</code> 语言中比较独特的语法。书中没有提到的，笔者这里做点补充：  </p><h3 id="一元运算符-Unary-operators"><a href="#一元运算符-Unary-operators" class="headerlink" title="一元运算符(Unary operators)"></a>一元运算符(Unary operators)</h3><blockquote><p>除去自增自减是一元运算符以为，JavaScript还提供了下面的几种一元运算符。</p></blockquote><ul><li>typeof <blockquote><p><code>typeof</code> 运算符返回一个表示 <code>xxx</code> 类型的字符串值。<code>xxx</code> 可为字符串、变量、关键词或对象，其类型将被返回。</p></blockquote></li><li>delete<blockquote><p><code>delete</code> 运算符, 删除一个对象或一个对象的属性或者一个数组中某一个键值。</p></blockquote></li><li>vold<blockquote><p><code>void</code> 运算符,表明一个运算没有返回值。    </p></blockquote></li></ul><p><strong>typeof 运算符</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> operand</span><br><span class="line"><span class="keyword">typeof</span> (operand)</span><br></pre></td></tr></table></figure></p><p><code>typeof</code> 操作符返回一个表示 <code>operand</code> 类型的字符串值。 <code>operand</code> 可为字符串、变量、关键词或对象，其类型将被返回。 <code>operand</code> 两侧的括号为可选。<br>案例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"5 + 2"</span>);</span><br><span class="line"><span class="keyword">var</span> shape = <span class="string">"round"</span>;</span><br><span class="line"><span class="keyword">var</span> size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> myFun;     <span class="comment">// return "function"</span></span><br><span class="line"><span class="keyword">typeof</span> shape;     <span class="comment">// return "string"</span></span><br><span class="line"><span class="keyword">typeof</span> size;      <span class="comment">// return "number"</span></span><br><span class="line"><span class="keyword">typeof</span> today;     <span class="comment">// return "object"</span></span><br><span class="line"><span class="keyword">typeof</span> dontExist; <span class="comment">// return "undefined"</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>typeof</code> 常用于数据类型的判断。通过类型结果继续下一步操作。 </p></blockquote><p><strong>delete 运算符</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> objectName;</span><br><span class="line"><span class="keyword">delete</span> objectName.property;</span><br><span class="line"><span class="keyword">delete</span> objectName[index];</span><br></pre></td></tr></table></figure></p><p><code>objectName</code> 是一个对象名, <code>property</code> 是一个已经存在的属性, <code>index</code> 是数组中的一个已经存在的键值的索引值.</p><blockquote><p>不推荐使用，并在ECMAScript中5严格模式是被禁止的。推荐的替代方案是分配要访问到一个临时变量，其属性的对象。<br>删除数组中的元素时，数组的长度是不变的，例如 delete a[3], a[4]  ，a[4] 和a[3] 仍然存在变成了undefined.</p></blockquote><p><strong>vold 运算符</strong><br>这个在c语言和java中都可以看到。都是代表函数声明没有返回值的时候。在JavaScript也差不多是这个情况。大家一定看过这个情况：<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;click here . Yexk&lt;/a&gt;</code> 这个汉代么点击的时候不会发生任何效果。</p><h2 id="语句（流程控制语句）"><a href="#语句（流程控制语句）" class="headerlink" title="语句（流程控制语句）"></a>语句（流程控制语句）</h2><p>流程控制语句是编程领域一个很重要的语法，语句通常使用一个或者多个关键字来完成指定的任务。这个很多语言上都差不多。</p><ul><li>if</li><li>do-while</li><li>while</li><li>for </li><li>forin </li><li>label</li><li>switch</li></ul><p>书中的语法相对比较详细。笔者想提及一个同样用于遍历的方法 <code>forEach</code> : 对数组的每个元素执行一次提供的函数。  </p><p><strong>语法：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">array.forEach(callback[, thisArg])</span><br></pre></td></tr></table></figure></p><p><strong>参数</strong><br>callback:为数组中每个元素执行的函数，该函数接收三个参数：<br>currentValue(当前值):数组中正在处理的当前元素。<br>index(索引):数组中正在处理的当前元素的索引。<br>array:forEach()方法正在操作的数组。<br>[thisArg]可选:可选参数。当执行回调 函数时用作this的值(参考对象)。<br><strong>返回值</strong><br>undefined.<br><strong>支持情况</strong><br>主流浏览器和IE9+   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br><span class="line">arr.forEach( <span class="function"><span class="params">element</span> =&gt;</span> <span class="built_in">console</span>.log(element));</span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数对任何语言来说都一个核心的概念。通过函数可以封装任意多条语句，而且可以在任何地方、任何时候调用。 <code>JavaScript</code> 中的函数使用的更多的是匿名函数，后续会有专门的章节对函数进行讲述。可以看 <code>第7章函数表达式</code> </p><p>在 ES6 中，函数新增了一个箭头函数，所谓是为开发者提供了一个便利。简介的语法，对 this 指向的修改。对我开发者还是很有用的。目前的市场上很多框架都在使用了。</p><blockquote><p>书中的函数在此章节也没有说的很详细。这里就简单的知道一下这个概念就行。</p></blockquote><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>基础语法章节，考验编程的基本工扎不扎实的时候。很多开发者都是出问题了就一头雾水，包括笔者自己也一样。虽然在调试程序上有点心得，但有时候还是需要调试一段时间。<br>对于调试程序，笔者觉得看结果是最好的调试方法。问题出在哪里直接看控制台错误就行，对有疑问的数据或者业务逻辑有问题，多打印结果出来看看就好。一句话基本功好，都不是问题。</p><blockquote><p>调试心得：多看控制台，多用 <code>console.log(data)</code>。</p></blockquote>]]></content>
      
      <categories>
          
          <category> professional_javascript_for_web_develop_3rd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript-web-develop-3rd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript高级程序设计第三版（读后感）（第二篇）</title>
      <link href="/20171203/professional-javascript-for-web-3-2/"/>
      <url>/20171203/professional-javascript-for-web-3-2/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript高级程序设计第三版（读后感）（第二篇）"><a href="#JavaScript高级程序设计第三版（读后感）（第二篇）" class="headerlink" title="JavaScript高级程序设计第三版（读后感）（第二篇）"></a>JavaScript高级程序设计第三版（读后感）（第二篇）</h1><blockquote><p>在上一篇中。我们提到了JavaScript的简史。在这一篇中简单的说说这本书的第二章。</p></blockquote><p>在书中的第二章中分为5个小节。分别介绍了 <code>JavaScript</code> 的简单使用、应用。脚本的几种使用方式。文档模式对脚本的影响。</p><h2 id="script-元素"><a href="#script-元素" class="headerlink" title="script 元素"></a><code>script</code> 元素</h2><p>书中提到的是 html4.01 中 html有6个属性。分别是：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>MIME-type</td><td>指示脚本的 MIME 类型。</td></tr><tr><td>async</td><td>async</td><td>规定异步执行脚本（仅适用于外部脚本）。</td></tr><tr><td>charset</td><td>charset</td><td>规定在外部脚本文件中使用的字符编码。</td></tr><tr><td>defer</td><td>defer</td><td>规定是否对脚本执行进行延迟，直到页面加载为止。</td></tr><tr><td>language</td><td>script</td><td>不赞成使用。规定脚本语言。请使用 type 属性代替它。</td></tr><tr><td>src</td><td>URL</td><td>规定外部脚本文件的 URL。</td></tr></tbody></table><p>但实际上现在大多数页面上用的只有两种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：</span></span><br><span class="line">&lt;script src=<span class="string">"URL"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 第二种：</span></span><br><span class="line">&lt;script src=<span class="string">"URL"</span> type=<span class="string">"MIME"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// MIME : `text/javascript`, `text/ecmascript`, `application/javascript` 和 `application/ecmascript`, `text/x-template` ...</span></span><br></pre></td></tr></table></figure></p><h2 id="嵌入代码与外部文件"><a href="#嵌入代码与外部文件" class="headerlink" title="嵌入代码与外部文件"></a>嵌入代码与外部文件</h2><p>在html中写JavaScript在正常不过了。但现在的js动不动就是上千上万行。那维护成本。。。难以想象。<br>也就是现在常用了两种写JavaScript的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、 外部文件</span></span><br><span class="line">&lt;script src=<span class="string">"URL"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 2、 嵌入代码</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// javascript 代码</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>工作中会出现一些争议，<code>script</code> 标签是放到哪里才比较好呢？但是在手册中（文档）都会告诉我们应该放到 <code>head</code> 标签里面。但业界比较好的做法是放到 <code>body</code> 标签的最后一行。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"URL"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// javascript 代码</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="noscript-元素"><a href="#noscript-元素" class="headerlink" title="noscript 元素"></a><code>noscript</code> 元素</h2><blockquote><p>实际工作中也很少用到。笔者自己也很少写。可能是我的工作中比较少遇到吧。</p></blockquote><p>这个标签主要对于早期的浏览器对 <code>JavaScript</code> 的支持程度的问题做的一个兼容操作。比如浏览器不支持脚本，或者脚本被禁用。使用这个标签就可以起到提示的作用。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;noscript&gt;</span><br><span class="line">&lt;h1&gt;本页面需要浏览器的支持。请启用浏览器，或者更换浏览器。&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>noscript&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>以现在的情况。已经不存在浏览器不支持js的情况了。所以这个标签后续的作用会慢慢的淡化。以至于很少有人会用到。</p></blockquote><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><ul><li><code>JavaScript</code> 插入到 <code>html</code> 需要使用 <code>script</code> 标签。</li><li>引用方式有两种：嵌入代码和外部文件。</li></ul><p>不知道现在学前端的同学有没有发现。。。其实前端 <code>自动化后</code>，<code>工程化后</code>，这些关系已经不是很明显了。所有的代码被拆分的零零散散。若老一辈前端程序员（也就是使用Dreamweaver开发的），如果他们再去做页面估计他们会崩溃的。</p>]]></content>
      
      <categories>
          
          <category> professional_javascript_for_web_develop_3rd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript-web-develop-3rd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript高级程序设计第三版（读后感）（第一篇）</title>
      <link href="/20171125/professional-javascript-for-web-3-1/"/>
      <url>/20171125/professional-javascript-for-web-3-1/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript高级程序设计第三版（读后感）（第一篇）"><a href="#JavaScript高级程序设计第三版（读后感）（第一篇）" class="headerlink" title="JavaScript高级程序设计第三版（读后感）（第一篇）"></a>JavaScript高级程序设计第三版（读后感）（第一篇）</h1><blockquote><p>《JavaScript高级程序设计第三版》nichoals C.Zakes 著。此书2012年出版。囊括了基本概念、语言核心、面向对象、BOM、DOM、事件模型、Canvas、…。还引用了当时的刚刚发布不久的html5、ECMAScript 5。</p></blockquote><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>本书囊括了25章节。附录4篇。可以算的上是一本权威指南书了。包含了JavaScript语言99%的内容。本书提供给JavaScript开发人员必须掌握的内容。全毛涵盖了JavaScript的个钟高级、有用的特性。</p><blockquote><p>读者笔名是<code>Yexk</code>。笔者不才由PHP后端入门，工作中慢慢的转型到了web前端。<br>邮箱：<a href="mailto:`yexk@yexk.cn" target="_blank" rel="noopener">`yexk@yexk.cn</a>`。欢迎大家来点评和指正。</p></blockquote><h1 id="第一章：JavaScript简介"><a href="#第一章：JavaScript简介" class="headerlink" title="第一章：JavaScript简介"></a>第一章：JavaScript简介</h1><p>讲述了JavaScript的起源，因何而生，如何发展。现状（从书的2012年的）。笔者接下来补充下2012~2017年发生的事件。设计的<code>BOM</code>、<code>DOM</code>、ECMA的想关事情和发展。</p><h2 id="JavaScript简史"><a href="#JavaScript简史" class="headerlink" title="JavaScript简史"></a>JavaScript简史</h2><p>JavaScript诞生于1995年。当时它主要目的是处理以前由服务器端语言负责一些校验工作。慢慢的发展成浏览器必备的一项特色功能。如今JavaScript的用途早已不再局限简单的验证数据了，慢慢的成为了一门功能全面的变成语言。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>JavaScript已经被Netscape公司提交给ECMA制定为标准，称之为ECMAScript，标准编号ECMA-262。目前最新版为ECMA-262 5th Edition。符合ECMA-262 3rd Edition标准的实现有： </p><ol><li>Microsoft公司的JScript.</li><li>Mozilla的JavaScript-C（C语言实现），现名SpiderMonkey</li><li>Mozilla的Rhino（Java实现）</li><li>Digital Mars公司的DMDScript</li><li><span style="color:red"> Google公司的V8（目前v8引擎可以说是火的一塌糊涂。） </span></li><li>WebKit</li></ol><h2 id="JavaScript和ECMAScript"><a href="#JavaScript和ECMAScript" class="headerlink" title="JavaScript和ECMAScript"></a><code>JavaScript</code>和<code>ECMAScript</code></h2><p>虽然 <code>JavaScript</code> 和 <code>ECMAScript</code> 这两个一直被人们用来表达相同的含义。但实际上 <code>ECMAScript</code> 只是制定了 <code>JavaScript</code>核心语言（基础）。而 <code>JavaScript</code>是由 <code>ECMAScript</code>、 <code>BOM</code> 和 <code>DOM</code> 组成。</p><ol><li><code>ECMAScript</code> ，描述了该语言的语法和基本对象。</li><li><code>DOM</code> （文档对象模型），描述处理网页内容的方法和接口。 </li><li><code>BOM</code> （浏览器对象模型），描述与浏览器进行交互的方法和接口。</li></ol><p><img src="1-1.png" alt="javascript 关系图"></p><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><blockquote><p>由于现在的厂商出现的很多不同版本的浏览器和支持的内核。导致的JavaScript。bom对象和dom对象支持的程度都有少许的差别。这也是前端工程师的痛。</p></blockquote><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><blockquote><p>目前最新的版本是es7。不过在现在的开发中es6用的都很少。只是一些 <code>nodejs</code> 相关的技术才使用了到了一些。</p></blockquote><p>它规定了这门语言的下列组成部分：</p><ol><li>语法（解析规则，关键字，流程控制，对象初始化等）</li><li>错误处理机制（throw， try/catch 以及用户自定义错误类型的能力）</li><li>类型（布尔值，数字，字符串，函数，对象等）</li><li>全局对象。在浏览器环境中，这个全局对象就是 window 对象，但是 ECMAScript 只定义与浏览器无关的 APIs（例如，parseInt， parseFloat， decodeURI， encodeURI 等）</li><li>基于原型的继承机制</li><li>内置对象和函数（JSON，Math，Array.prototype 方法，Object introspection 方法等）</li><li>严格模式</li></ol><h3 id="DOM-（文档对象模型）"><a href="#DOM-（文档对象模型）" class="headerlink" title="DOM （文档对象模型）"></a>DOM （文档对象模型）</h3><p>根据书中的描述和我的所识。主要制定了对文档的操作接口。实现了控制文档显示数据。按照我们的意愿去加载所需要的内容。<br>目前dom提供了三种等级。由于市场的发展。其实很少人会注意到这些区别。毕竟这些功能对于目前市面上的浏览器来说都是已经支持的了。</p><ol><li>对文档的操作提供了 <code>document</code> 对象。</li><li>对元素（标签）操作提供了 <code>element</code> 对象。</li><li>对元素（标签）属性操作提供了 <code>attribute</code> 对象。</li><li>对元素（标签）事件监听提供了 <code>event</code> 对象。</li></ol><h3 id="BOM-（浏览器对象模型）"><a href="#BOM-（浏览器对象模型）" class="headerlink" title="BOM （浏览器对象模型）"></a>BOM （浏览器对象模型）</h3><p>主要实现了对浏览器的信息的获取和简单的控制：</p><ol><li>弹出新浏览器窗口的功能</li><li>移动、缩放和关闭浏览器窗口的功能。</li><li>提供浏览器详细信息的 <code>navigator</code> 对象。</li><li>提供浏览器所加载页面的详细信息的 <code>location</code> 对象。</li><li>提供用户显示器详细信息的 <code>screen</code> 对象。</li><li>对 <code>cookie</code> 支持。</li><li>像 <code>XMLHttpRequest</code> 和 <code>ActiveXObject</code> 对象的支持。</li></ol><blockquote><p>由于浏览器厂商的不一样。导致的这些对象的属性和方法有少许的不一样。<br>截止2014年8月份，主流浏览器的最新版本都已经支持 <code>ECMAScript 5.1</code> ，但是旧版本的浏览器大都仅支持 <code>ECMAScript 3</code> 和 <code>ECMAScript 5</code> 的部分标准。<a href="http://kangax.github.io/compat-table/non-standard/" target="_blank" rel="noopener">这里</a>是一些关于 <code>ECMAScript 5</code> 的浏览器支持情况的资料。如今，主流浏览器的最新版本已经支持 <code>ECMAScript 6</code> 的大部分标准。</p></blockquote><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>ECMA-262（ECMAScript 4 或者 ES4）第4版的提议本应成为自1999年第3版发布以来的一次重要更新，但是在2008年8月份，ECMAScript第4版被回退到一个代号为ECMAScript Harmony的项目，像const关键字以及对象代理等内容都被涵盖其中。你可以在这里跟踪这个项目的进展。ECMA 委员会已经在 2015年6月17号，正式发布了第6版标准。</p><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>认识 <code>JavaScript</code> 和 <code>EMCAScript</code> 的区别认识。前者基于后者提供的语法和基础的支持构建了一门脚步本语言。<br>浏览器产生差异性的原因是各大浏览器想争夺这个蛋糕导致的三足鼎立的情况。导致的我们开发者的复杂程度。虽然后续的 <code>HTML5</code> 有望统一，但需要完全统一需要一定的时间。</p>]]></content>
      
      <categories>
          
          <category> professional_javascript_for_web_develop_3rd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript-web-develop-3rd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript unicode和16进制互转</title>
      <link href="/20170906/js-unicode-int16/"/>
      <url>/20170906/js-unicode-int16/</url>
      <content type="html"><![CDATA[<blockquote><p>有时候会遇到一些问题。传入后台的数据如果是中文的就识别不了，比如后台对中文支持的不是很好的话。就可以使用这套函数转换一下。</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unicode字符串转16进制</span></span><br><span class="line"><span class="comment"> * eg: </span></span><br><span class="line"><span class="comment"> *  unicodetoInt16('Yexk_M 极致分享 ym125.cc') </span></span><br><span class="line"><span class="comment"> *  //输出：0x5965786B5F4D20E69E81E887B4E58886E4BAAB20796D3132352E6363</span></span><br><span class="line"><span class="comment"> * @Author   Yexk       &lt;yexk@yexk.cn&gt;</span></span><br><span class="line"><span class="comment"> * @DateTime 2017-09-06</span></span><br><span class="line"><span class="comment"> * @param    &#123;[string]&#125;   str                [字符串]</span></span><br><span class="line"><span class="comment"> * @return   &#123;[int]&#125;                         [16进制数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicodetoInt16</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">str = str.split(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i].charCodeAt(<span class="number">0</span>)&gt;<span class="number">255</span>) &#123;</span><br><span class="line">str[i] = <span class="built_in">encodeURI</span>(str[i]);</span><br><span class="line">str[i] = str[i].replace(<span class="regexp">/%/ig</span>,<span class="string">''</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">str[i] = str[i].charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">　　<span class="keyword">return</span> <span class="string">'0x'</span>+(str.join(<span class="string">""</span>)).toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入十六进制数进行中文解码。</span></span><br><span class="line"><span class="comment"> * eg:</span></span><br><span class="line"><span class="comment"> *  int16toUnicode('0x5965786B5F4D20E69E81E887B4E58886E4BAAB20796D3132352E6363') </span></span><br><span class="line"><span class="comment"> *  //输出：Yexk_M 极致分享 ym125.cc</span></span><br><span class="line"><span class="comment"> * @Author   Yexk       &lt;yexk@yexk.cn&gt;</span></span><br><span class="line"><span class="comment"> * @DateTime 2017-09-06</span></span><br><span class="line"><span class="comment"> * @param    &#123;[int]&#125;   int             [传入16进制数]</span></span><br><span class="line"><span class="comment"> * @return   &#123;[string]&#125;                [返回解码后的字符串]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int16toUnicode</span>(<span class="params">int16</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> tmp=<span class="string">''</span>;</span><br><span class="line">int16 = int16.substring(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (int16.length % <span class="number">2</span>) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> iii = <span class="number">0</span>; iii &lt; int16.length; iii += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp += <span class="string">'%'</span> + int16.charAt(iii) + int16.charAt(iii+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">decodeURI</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ISSET和EMPTY的区别</title>
      <link href="/20170902/emtpy-isset/"/>
      <url>/20170902/emtpy-isset/</url>
      <content type="html"><![CDATA[<p>isset 和 empty 这两个东西一直困扰则我。。判断的时候到底用什么好呢？</p><a id="more"></a><h3 id="empty：检查一个变量是否为空"><a href="#empty：检查一个变量是否为空" class="headerlink" title="empty：检查一个变量是否为空"></a>empty：检查一个变量是否为空</h3><p>empty 使用变量和null判断。如果等于就返回true，否则返回true。</p><h3 id="isset：检查变量是否设置"><a href="#isset：检查变量是否设置" class="headerlink" title="isset：检查变量是否设置"></a>isset：检查变量是否设置</h3><p>isset 判断变量是否已定义，同时判断变量是否赋值，并且赋值不能为null。满足以上条件就返回true，否则返回false 。</p><p><img src="code.png" alt="code.png"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>其实<code>empty</code>（判断变量是否为空）和 <code>isset</code>（判断变量是否设置）<br>总体来说出去一些特殊的字符:</p><pre><code>- &quot;&quot;（空字符串不带空格），- &quot;  &quot;（空字符串带空格） , - 0 , &quot;0&quot;（字符串零） , - null , - $var(定义未赋值) , - array()（空数组）， - false </code></pre><p>这些值是特注意的。<br><strong>还有一种情况要特别注意</strong>：<br>当变量为空字符的时候又分为<strong>有</strong>空格和<strong>无</strong>空格的。<br><span style="color:red">当使用<code>empty</code>判断空字符串<strong>有空格（$x = “  “）</strong>的时候，返回false。</span><br><span style="color:red">当使用<code>empty</code>判断空字符<strong>无空格（$x = “”）</strong>的时候，返回true。</span><br><span style="color:red"><strong>同时要注意empty和isset是判断变量的，不能直接判断值。</strong></span></p><hr><h3 id="最后附上官方的对比图"><a href="#最后附上官方的对比图" class="headerlink" title="最后附上官方的对比图"></a>最后附上官方的对比图</h3><p><img src="php_isset_empty.png" alt="php_isset_empty.png"></p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> isset </tag>
            
            <tag> empty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>router 快速入门</title>
      <link href="/20170902/router-base/"/>
      <url>/20170902/router-base/</url>
      <content type="html"><![CDATA[<blockquote><p>路由是web框架的一个入口控制中心。</p></blockquote><a id="more"></a><p>构建最基本的路由只需要一个 URI 与一个 闭包，这里提供了一个非常简单优雅的定义路由的方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>还可以定义一些路由参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&apos;posts/&#123;post&#125;/comments/&#123;comment&#125;&apos;, function ($postId, $commentId) &#123;</span><br><span class="line">    // return $postId . $commentId;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>注意：路由参数不能包含 - 字符。请用下划线 (_) 替换。</code>   </p><h2 id="可用的路由方法"><a href="#可用的路由方法" class="headerlink" title="可用的路由方法"></a>可用的路由方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route::get($uri, $callback);</span><br><span class="line">Route::post($uri, $callback);</span><br><span class="line">Route::put($uri, $callback);</span><br><span class="line">Route::patch($uri, $callback);</span><br><span class="line">Route::delete($uri, $callback);</span><br><span class="line">Route::options($uri, $callback);</span><br></pre></td></tr></table></figure><p>有的时候你可能需要注册一个可响应多个 HTTP 方法的路由，这时你可以使用 <code>match</code> 方法，也可以使用 <code>any</code> 方法注册一个实现响应所有 HTTP 的请求的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Route::match([&apos;get&apos;, &apos;post&apos;], &apos;/&apos;, function () &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::any(&apos;foo&apos;, function () &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>例如：</strong><br>在<code>web.php</code>里面配置了如下路由：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'show'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><img src="Laravel_route_demo1.png" alt="Laravel_route_demo1.png"></p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>命名路由可以方便的生成 <code>URL</code> 或者重定向到指定的路由，你可以在定义路由后使用 <code>name</code> 方法实现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;name(<span class="string">'profile'</span>);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">Route::get(<span class="string">'user/profile'</span>, <span class="string">'UserController@showProfile'</span>)-&gt;name(<span class="string">'profile'</span>);</span><br></pre></td></tr></table></figure></p><p>页面生成url方法实现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 URL...</span></span><br><span class="line">$url = route(<span class="string">'profile'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成重定向...</span></span><br><span class="line"><span class="keyword">return</span> redirect()-&gt;route(<span class="string">'profile'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><h3 id="必选路由参数"><a href="#必选路由参数" class="headerlink" title="必选路由参数"></a>必选路由参数</h3><p>当然，有时我们需要在路由中捕获一些 URL 片段。例如，我们需要从 URL 中捕获用户的 ID ，我们可以这样定义路由参数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User '</span>.$id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>也可以根据需要在路由中定义多个参数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'posts/&#123;post&#125;/comments/&#123;comment&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($postId, $commentId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>路由的参数通常都会被放在 {} 内，并且参数名只能为字母，当运行路由时，参数会通过路由闭包来传递。</p><p><code>注意： 路由参数不能包含 - 字符。请用下划线 (_) 替换。</code></p><h3 id="可选路由参数"><a href="#可选路由参数" class="headerlink" title="可选路由参数"></a>可选路由参数</h3><p>声明路由参数时，如需指定该参数为可选，可以在参数后面加上 ? 来实现，但是相应的变量必须有默认值：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;name?&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name = null)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $name;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;name?&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name = <span class="string">'John'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="正则表达式约束"><a href="#正则表达式约束" class="headerlink" title="正则表达式约束"></a>正则表达式约束</h3><p>你可以使用 where 方法来规范你的路由参数格式。<code>where</code> 方法接受参数名称和定义参数约束规则的正则表达式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;name&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where(<span class="string">'name'</span>, <span class="string">'[A-Za-z]+'</span>);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;/&#123;name&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id, $name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where([<span class="string">'id'</span> =&gt; <span class="string">'[0-9]+'</span>, <span class="string">'name'</span> =&gt; <span class="string">'[a-z]+'</span>]);</span><br></pre></td></tr></table></figure></p><h3 id="全局约束"><a href="#全局约束" class="headerlink" title="全局约束"></a>全局约束</h3><p>如果你希望路由参数在全局范围内都遵循一个确定的正则表达式约束，则可以使用 <code>pattern</code> 方法。你应该在 <code>RouteServiceProvider</code> 的 <code>boot</code> 方法里定义这些模式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义你的路由模型绑定, pattern 过滤器等。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::pattern(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::boot();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Pattern</code> 一旦被定义，便会自动应用到所有使用该参数名称的路由上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 仅在 &#123;id&#125; 为数字时执行...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>例如：</strong><br>在<code>web.php</code>里面配置了如下路由：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'show/&#123;name&#125;'</span>,<span class="function"><span class="keyword">function</span><span class="params">($name)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello '</span> . $name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="Laravel_route_demo2.png" alt="Laravel_route_demo2.png"></p><h2 id="控制器路由绑定"><a href="#控制器路由绑定" class="headerlink" title="控制器路由绑定"></a>控制器路由绑定</h2><p>语法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法绑定。</span></span><br><span class="line">Route::get(路径,命名空间\控制器@方法);</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">Route::get(<span class="string">'blog'</span>,<span class="string">'BlogController@index'</span>);</span><br><span class="line"><span class="comment">//绑定了Blog控制器的index方法到blog</span></span><br></pre></td></tr></table></figure></p><p>详细方法到控制器绑定方法请移步到 : <a href="controller.md">控制器路由绑定</a></p><h2 id="跨站请求伪造-CSRF"><a href="#跨站请求伪造-CSRF" class="headerlink" title="跨站请求伪造 ( CSRF )"></a>跨站请求伪造 ( CSRF )</h2><blockquote><p>Laravel 提供了简单的方法使你的应用免受 跨站请求伪造 (CSRF) 的袭击。跨站请求伪造是一种恶意的攻击，它凭借已通过身份验证的用户身份来运行未经过授权的命令。</p></blockquote><p>功能实现：<br>任何情况下在你的应用程序中定义 HTML 表单时都应该包含 CSRF 令牌隐藏域，这样 CSRF 保护中间件才可以验证请求。辅助函数 <code>csrf_field</code> 可以用来生成令牌字段：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/profile"</span>&gt;</span></span><br><span class="line">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>包含在 <code>web</code> 中间件组里的 <code>VerifyCsrfToken</code> 中间件会自动验证请求里的令牌 <code>token</code> 与 <code>Session</code> 中存储的令牌 <code>token</code> 是否匹配。</p><blockquote><p>该功能可以简单的理解为生活中的钥匙（Token），我们访问这个房子（网站）的时候就要带上这个钥匙。否则就不让你进去。</p></blockquote>]]></content>
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> router </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php artisan 常用的命令和速查表</title>
      <link href="/20170902/artisan/"/>
      <url>/20170902/artisan/</url>
      <content type="html"><![CDATA[<h2 id="php-artisan"><a href="#php-artisan" class="headerlink" title="php artisan"></a>php artisan</h2><blockquote><p>Artisan 是 Laravel 的命令行接口的名称， 它提供了许多实用的命令来帮助你开发 Laravel 应用。例如：要查看所有的 Artisan 命令列表，可以使用 list 命令： <code>php artison list</code></p></blockquote><h2 id="创建命令"><a href="#创建命令" class="headerlink" title="创建命令"></a>创建命令</h2><blockquote><p>暂时略！</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">php artisan list             ## 列出所有的命令</span><br><span class="line">php artisan serve            ## 启动laravel默认的服务</span><br><span class="line">php artisan up               ## 开启服务器</span><br><span class="line">php artisan down             ## 关闭服务器（比如维护升级）</span><br><span class="line">php artisan migrate          ## 执行创建的数据库</span><br><span class="line">php artisan make:controller  ## 创建控制器</span><br><span class="line">php artisan make:model       ## 创建模型</span><br><span class="line">php artisan make:middleware  ## 创建中间件</span><br><span class="line">php artisan make:migration   ## 创建数据库表格</span><br></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>每个命令也包含了「帮助」界面，它会显示并概述命令可使的参数及选项。只需要在命令前面加上 help 即可显示命令帮助界面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan help migrate</span><br></pre></td></tr></table></figure></p><p>敲入该命令就会出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">λ php artisan help migrate</span><br><span class="line">Usage:</span><br><span class="line">  migrate [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --database[=DATABASE]  The database connection to use.</span><br><span class="line">      --force                Force the operation to run when in production.</span><br><span class="line">      --path[=PATH]          The path of migrations files to be executed.</span><br><span class="line">      --pretend              Dump the SQL queries that would be run.</span><br><span class="line">      --seed                 Indicates if the seed task should be re-run.</span><br><span class="line">      --step                 Force the migrations to be run so they can be rolled back individually.</span><br><span class="line">  -h, --help                 Display this help message</span><br><span class="line">  -q, --quiet                Do not output any message</span><br><span class="line">  -V, --version              Display this application version</span><br><span class="line">      --ansi                 Force ANSI output</span><br><span class="line">      --no-ansi              Disable ANSI output</span><br><span class="line">  -n, --no-interaction       Do not ask any interactive question</span><br><span class="line">      --env[=ENV]            The environment the command should run under</span><br><span class="line">  -v|vv|vvv, --verbose       Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug</span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line">  Run the database migrations</span><br></pre></td></tr></table></figure></p><h2 id="所有命令"><a href="#所有命令" class="headerlink" title="所有命令"></a>所有命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">λ php artisan</span><br><span class="line">Laravel Framework 5.4.27</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  command [options] [arguments]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help            Display this help message</span><br><span class="line">  -q, --quiet           Do not output any message</span><br><span class="line">  -V, --version         Display this application version</span><br><span class="line">      --ansi            Force ANSI output</span><br><span class="line">      --no-ansi         Disable ANSI output</span><br><span class="line">  -n, --no-interaction  Do not ask any interactive question</span><br><span class="line">      --env[=ENV]       The environment the command should run under</span><br><span class="line">  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  clear-compiled       Remove the compiled class file</span><br><span class="line">  **down                 Put the application into maintenance mode</span><br><span class="line">  env                  Display the current framework environment</span><br><span class="line">  help                 Displays help for a command</span><br><span class="line">  inspire              Display an inspiring quote</span><br><span class="line">  list                 Lists commands</span><br><span class="line">  **migrate              Run the database migrations</span><br><span class="line">  optimize             Optimize the framework for better performance</span><br><span class="line">  **serve                Serve the application on the PHP development server</span><br><span class="line">  tinker               Interact with your application</span><br><span class="line">  **up                   Bring the application out of maintenance mode</span><br><span class="line"> app</span><br><span class="line">  app:name             Set the application namespace</span><br><span class="line"> auth</span><br><span class="line">  auth:clear-resets    Flush expired password reset tokens</span><br><span class="line"> cache</span><br><span class="line">  **cache:clear          Flush the application cache</span><br><span class="line">  cache:forget         Remove an item from the cache</span><br><span class="line">  cache:table          Create a migration for the cache database table</span><br><span class="line"> config</span><br><span class="line">  config:cache         Create a cache file for faster configuration loading</span><br><span class="line">  config:clear         Remove the configuration cache file</span><br><span class="line"> db</span><br><span class="line">  db:seed              Seed the database with records</span><br><span class="line"> event</span><br><span class="line">  event:generate       Generate the missing events and listeners based on registration</span><br><span class="line"> key</span><br><span class="line">  key:generate         Set the application key</span><br><span class="line"> make</span><br><span class="line">  make:auth            Scaffold basic login and registration views and routes</span><br><span class="line">  make:command         Create a new Artisan command</span><br><span class="line">  **make:controller      Create a new controller class</span><br><span class="line">  make:event           Create a new event class</span><br><span class="line">  make:job             Create a new job class</span><br><span class="line">  make:listener        Create a new event listener class</span><br><span class="line">  make:mail            Create a new email class</span><br><span class="line">  **make:middleware      Create a new middleware class</span><br><span class="line">  **make:migration       Create a new migration file</span><br><span class="line">  **make:model           Create a new Eloquent model class</span><br><span class="line">  make:notification    Create a new notification class</span><br><span class="line">  make:policy          Create a new policy class</span><br><span class="line">  make:provider        Create a new service provider class</span><br><span class="line">  make:request         Create a new form request class</span><br><span class="line">  make:seeder          Create a new seeder class</span><br><span class="line">  make:test            Create a new test class</span><br><span class="line"> migrate</span><br><span class="line">  migrate:install      Create the migration repository</span><br><span class="line">  **migrate:refresh      Reset and re-run all migrations</span><br><span class="line">  migrate:reset        Rollback all database migrations</span><br><span class="line">  **migrate:rollback     Rollback the last database migration</span><br><span class="line">  migrate:status       Show the status of each migration</span><br><span class="line"> notifications</span><br><span class="line">  notifications:table  Create a migration for the notifications table</span><br><span class="line"> queue</span><br><span class="line">  queue:failed         List all of the failed queue jobs</span><br><span class="line">  queue:failed-table   Create a migration for the failed queue jobs database table</span><br><span class="line">  queue:flush          Flush all of the failed queue jobs</span><br><span class="line">  queue:forget         Delete a failed queue job</span><br><span class="line">  queue:listen         Listen to a given queue</span><br><span class="line">  queue:restart        Restart queue worker daemons after their current job</span><br><span class="line">  queue:retry          Retry a failed queue job</span><br><span class="line">  queue:table          Create a migration for the queue jobs database table</span><br><span class="line">  queue:work           Start processing jobs on the queue as a daemon</span><br><span class="line"> route</span><br><span class="line">  route:cache          Create a route cache file for faster route registration</span><br><span class="line">  route:clear          Remove the route cache file</span><br><span class="line">  route:list           List all registered routes</span><br><span class="line"> schedule</span><br><span class="line">  schedule:run         Run the scheduled commands</span><br><span class="line"> session</span><br><span class="line">  session:table        Create a migration for the session database table</span><br><span class="line"> storage</span><br><span class="line">  storage:link         Create a symbolic link from "public/storage" to "storage/app/public"</span><br><span class="line"> vendor</span><br><span class="line">  vendor:publish       Publish any publishable assets from vendor packages</span><br><span class="line"> view</span><br><span class="line">  view:clear           Clear all compiled view files</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> 命令行 </tag>
            
            <tag> artisan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lavavel 学习大纲（路线）</title>
      <link href="/20170825/laravel-lesson/"/>
      <url>/20170825/laravel-lesson/</url>
      <content type="html"><![CDATA[<p>个人经验总结所得</p><a id="more"></a><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="Laravel_list.png" alt="Laravel_list.png"></p><h1 id="lavavel-大致的安排"><a href="#lavavel-大致的安排" class="headerlink" title="lavavel 大致的安排"></a>lavavel 大致的安排</h1><h3 id="第一讲-《前置工作》"><a href="#第一讲-《前置工作》" class="headerlink" title="第一讲 《前置工作》"></a>第一讲 《前置工作》</h3><p>Composer：简介、下载和安装、快速入门、常用的场景。</p><ul><li><a href="/20170819/composer-install/">composer安装和使用</a></li><li><a href="/20170819/composer-get-start/">composer快速入门</a></li></ul><p>Laravel：简介、下载和安装。</p><ul><li><a href="/20170825/laravel-download-install/">laravel下载和安装</a></li><li><a href="/20170825/laravel-router/">laravel基本路由</a></li><li><a href="/20170825/laravel-router/">laravel基本路由</a></li></ul><h3 id="第二讲-《命令的使用》"><a href="#第二讲-《命令的使用》" class="headerlink" title="第二讲 《命令的使用》"></a>第二讲 《命令的使用》</h3><p>Laravel：</p><ul><li><a href="/20170825/laravel-download-install/">目录结构</a></li><li><a href="20170902/artisan/">命令行工具（artisan）</a></li><li>artisan常用命令</li></ul><h3 id="第三讲-《路由模式》"><a href="#第三讲-《路由模式》" class="headerlink" title="第三讲 《路由模式》"></a>第三讲 《路由模式》</h3><p>Laravel：</p><ul><li><a href="/20170902/router-base/">路由（router）</a><ul><li><a href="/20170902/router-base/">CSRF 白名单</a></li></ul></li><li>请求（request）</li><li>响应（response）</li></ul><h3 id="第四讲-《mvc设计模式一》"><a href="#第四讲-《mvc设计模式一》" class="headerlink" title="第四讲 《mvc设计模式一》"></a>第四讲 《mvc设计模式一》</h3><p>Laravel：</p><ul><li>控制器（controller）</li><li>RESTFul风格控制器</li><li>中间件（Middleware）</li></ul><h3 id="第五讲-《mvc设计模式二》"><a href="#第五讲-《mvc设计模式二》" class="headerlink" title="第五讲 《mvc设计模式二》"></a>第五讲 《mvc设计模式二》</h3><p>Laravel：</p><ul><li>模型（model）</li><li>数据库（databases）</li><li>数据库管理（migrations）</li></ul><h3 id="第六讲-《mvc设计模式三》"><a href="#第六讲-《mvc设计模式三》" class="headerlink" title="第六讲 《mvc设计模式三》"></a>第六讲 《mvc设计模式三》</h3><p>Laravel：</p><ul><li>视图（view）</li><li>Blade模板</li></ul><h3 id="第七讲-《其他杂项》"><a href="#第七讲-《其他杂项》" class="headerlink" title="第七讲 《其他杂项》"></a>第七讲 《其他杂项》</h3><p>。。。</p><blockquote><p>前端那边的vue不打算讲。涉及东西太多。。。</p></blockquote>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lavavel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>laravel基本路由</title>
      <link href="/20170825/laravel-router/"/>
      <url>/20170825/laravel-router/</url>
      <content type="html"><![CDATA[<h2 id="route-基本路由"><a href="#route-基本路由" class="headerlink" title="route 基本路由"></a>route 基本路由</h2><p>构建最基本的路由只需要一个 URI 与一个 闭包，这里提供了一个非常简单优雅的定义路由的方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>还可以定义一些路由参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&apos;posts/&#123;post&#125;/comments/&#123;comment&#125;&apos;, function ($postId, $commentId) &#123;</span><br><span class="line">    // return $postId . $commentId;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>注意：路由参数不能包含 - 字符。请用下划线 (_) 替换。</code>   </p><h2 id="可用的路由方法"><a href="#可用的路由方法" class="headerlink" title="可用的路由方法"></a>可用的路由方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route::get($uri, $callback);</span><br><span class="line">Route::post($uri, $callback);</span><br><span class="line">Route::put($uri, $callback);</span><br><span class="line">Route::patch($uri, $callback);</span><br><span class="line">Route::delete($uri, $callback);</span><br><span class="line">Route::options($uri, $callback);</span><br></pre></td></tr></table></figure><p>有的时候你可能需要注册一个可响应多个 HTTP 方法的路由，这时你可以使用 <code>match</code> 方法，也可以使用 <code>any</code> 方法注册一个实现响应所有 HTTP 的请求的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Route::match([&apos;get&apos;, &apos;post&apos;], &apos;/&apos;, function () &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::any(&apos;foo&apos;, function () &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>例如：</strong><br>在<code>web.php</code>里面配置了如下路由：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'show'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><img src="Laravel_route_demo1.png" alt="Laravel_route_demo1.png"></p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>命名路由可以方便的生成 <code>URL</code> 或者重定向到指定的路由，你可以在定义路由后使用 <code>name</code> 方法实现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;name(<span class="string">'profile'</span>);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">Route::get(<span class="string">'user/profile'</span>, <span class="string">'UserController@showProfile'</span>)-&gt;name(<span class="string">'profile'</span>);</span><br></pre></td></tr></table></figure></p><p>页面生成url方法实现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 URL...</span></span><br><span class="line">$url = route(<span class="string">'profile'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成重定向...</span></span><br><span class="line"><span class="keyword">return</span> redirect()-&gt;route(<span class="string">'profile'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><h3 id="必选路由参数"><a href="#必选路由参数" class="headerlink" title="必选路由参数"></a>必选路由参数</h3><p>当然，有时我们需要在路由中捕获一些 URL 片段。例如，我们需要从 URL 中捕获用户的 ID ，我们可以这样定义路由参数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User '</span>.$id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>也可以根据需要在路由中定义多个参数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'posts/&#123;post&#125;/comments/&#123;comment&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($postId, $commentId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>路由的参数通常都会被放在 {} 内，并且参数名只能为字母，当运行路由时，参数会通过路由闭包来传递。</p><p><code>注意： 路由参数不能包含 - 字符。请用下划线 (_) 替换。</code></p><h3 id="可选路由参数"><a href="#可选路由参数" class="headerlink" title="可选路由参数"></a>可选路由参数</h3><p>声明路由参数时，如需指定该参数为可选，可以在参数后面加上 ? 来实现，但是相应的变量必须有默认值：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;name?&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name = null)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $name;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;name?&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name = <span class="string">'John'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="正则表达式约束"><a href="#正则表达式约束" class="headerlink" title="正则表达式约束"></a>正则表达式约束</h3><p>你可以使用 where 方法来规范你的路由参数格式。<code>where</code> 方法接受参数名称和定义参数约束规则的正则表达式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;name&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where(<span class="string">'name'</span>, <span class="string">'[A-Za-z]+'</span>);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;/&#123;name&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id, $name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;where([<span class="string">'id'</span> =&gt; <span class="string">'[0-9]+'</span>, <span class="string">'name'</span> =&gt; <span class="string">'[a-z]+'</span>]);</span><br></pre></td></tr></table></figure></p><h3 id="全局约束"><a href="#全局约束" class="headerlink" title="全局约束"></a>全局约束</h3><p>如果你希望路由参数在全局范围内都遵循一个确定的正则表达式约束，则可以使用 <code>pattern</code> 方法。你应该在 <code>RouteServiceProvider</code> 的 <code>boot</code> 方法里定义这些模式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义你的路由模型绑定, pattern 过滤器等。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::pattern(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::boot();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Pattern</code> 一旦被定义，便会自动应用到所有使用该参数名称的路由上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 仅在 &#123;id&#125; 为数字时执行...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>例如：</strong><br>在<code>web.php</code>里面配置了如下路由：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'show/&#123;name&#125;'</span>,<span class="function"><span class="keyword">function</span><span class="params">($name)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello '</span> . $name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="Laravel_route_demo2.png" alt="Laravel_route_demo2.png"></p><h2 id="控制器路由绑定"><a href="#控制器路由绑定" class="headerlink" title="控制器路由绑定"></a>控制器路由绑定</h2><p>语法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法绑定。</span></span><br><span class="line">Route::get(路径,命名空间\控制器@方法);</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">Route::get(<span class="string">'blog'</span>,<span class="string">'BlogController@index'</span>);</span><br><span class="line"><span class="comment">//绑定了Blog控制器的index方法到blog</span></span><br></pre></td></tr></table></figure></p><p>详细方法到控制器绑定方法请移步到 : <a href="controller.md">控制器路由绑定</a></p><h2 id="跨站请求伪造-CSRF"><a href="#跨站请求伪造-CSRF" class="headerlink" title="跨站请求伪造 ( CSRF )"></a>跨站请求伪造 ( CSRF )</h2><blockquote><p>Laravel 提供了简单的方法使你的应用免受 跨站请求伪造 (CSRF) 的袭击。跨站请求伪造是一种恶意的攻击，它凭借已通过身份验证的用户身份来运行未经过授权的命令。</p></blockquote><p>功能实现：<br>任何情况下在你的应用程序中定义 HTML 表单时都应该包含 CSRF 令牌隐藏域，这样 CSRF 保护中间件才可以验证请求。辅助函数 <code>csrf_field</code> 可以用来生成令牌字段：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/profile"</span>&gt;</span></span><br><span class="line">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>包含在 <code>web</code> 中间件组里的 <code>VerifyCsrfToken</code> 中间件会自动验证请求里的令牌 <code>token</code> 与 <code>Session</code> 中存储的令牌 <code>token</code> 是否匹配。</p><blockquote><p>该功能可以简单的理解为生活中的钥匙（Token），我们访问这个房子（网站）的时候就要带上这个钥匙。否则就不让你进去。</p></blockquote>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> route </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>laravel下载和安装</title>
      <link href="/20170825/laravel-download-install/"/>
      <url>/20170825/laravel-download-install/</url>
      <content type="html"><![CDATA[<h2 id="Laravel-让我们书写优雅的代码"><a href="#Laravel-让我们书写优雅的代码" class="headerlink" title="Laravel 让我们书写优雅的代码"></a>Laravel 让我们书写优雅的代码</h2><blockquote><p>为 Web 艺术家创造的 PHP 框架</p></blockquote><a id="more"></a><h3 id="通过-Laravel-安装工具"><a href="#通过-Laravel-安装工具" class="headerlink" title="通过 Laravel 安装工具"></a>通过 Laravel 安装工具</h3><p>首先，使用 Composer 下载 Laravel 安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require "laravel/installer"</span><br></pre></td></tr></table></figure><p>请确定你已将 <code>~/.composer/vendor/bin</code> 路径加到 PATH，只有这样系统才能找到 laravel 的执行文件。</p><p>一旦安装完成，就可以使用 <code>laravel new</code> 命令在指定目录创建一个新的 Laravel 项目。<br>例如：<code>laravel new blog</code> 将会在当前目录下创建一个叫 blog 的目录，此目录里面存放着新安装的 Laravel 和代码依赖。<br>这个方法的安装速度比通过 Composer 安装要快上许多，因为代码依赖是直接一起打包安装的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">laravel new blog</span><br></pre></td></tr></table></figure><p>在安装 Laravel 之后，你需要配置你的 Web 服务器的根目录为 public 目录。 这个目录的 index.php 文件作为所有 HTTP 请求进入应用的前端处理器。</p><blockquote><p>目录权限<br>安装 Laravel 之后， 你需要配置一些权限 。 storage 和 bootstrap/cache 目录应该允许你的 Web 服务器写入，否则 Laravel 将无法写入。</p></blockquote><h2 id="目录结构解析"><a href="#目录结构解析" class="headerlink" title="目录结构解析"></a>目录结构解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Laravel</span><br><span class="line">├─app                       --- 应用程序的核心代码</span><br><span class="line">│  ├─Console                --- 应用所有自定义的 Artisan 命令</span><br><span class="line">│  ├─Exceptions </span><br><span class="line">│  ├─Http                   --- 目录包含了控制器、中间件以及表单请求等，几乎所有进入应用的请求处理都在这里进行。</span><br><span class="line">│  │  ├─Controllers</span><br><span class="line">│  │  └─Middleware         </span><br><span class="line">│  └─Providers</span><br><span class="line">├─bootstrap                 --- 几个框架启动和自动加载设置的文件</span><br><span class="line">├─config--- 应用程序的配置文件</span><br><span class="line">├─database                  --- 数据迁移及填充文件，你还可以将其作为 SQLite 数据库的存放目录。</span><br><span class="line">│  ├─migrations             --- </span><br><span class="line">├─public                    --- Laravel 的 HTTP 入口文件 index.php 和前端资源文件（图片、JavaScript、CSS等）。</span><br><span class="line">├─resources                 --- 视图、原始的资源文件 (LESS、SASS、CoffeeScript) ，以及语言包。</span><br><span class="line">│  ├─assets</span><br><span class="line">│  ├─lang</span><br><span class="line">│  └─views</span><br><span class="line">├─routes                    --- 应用的所有路由定义。Laravel 默认提供了三个路由文件：web.php, api.php, 和 console.php。</span><br><span class="line">├─storage                   --- 编译后的 Blade 模板、基于文件的 session、文件缓存和其它框架生成的文件。</span><br><span class="line">│  ├─app</span><br><span class="line">│  ├─framework</span><br><span class="line">│  └─logs</span><br><span class="line">├─tests                     --- 目录包含自动化测试。</span><br><span class="line">│  ├─Feature</span><br><span class="line">│  └─Unit</span><br><span class="line">└─vendor                    --- 包含所有 Composer 依赖。</span><br></pre></td></tr></table></figure><blockquote><p>Laravel 默认的目录结构意在为构建不同大小的应用提供一个好的起点，当然，你可以自己按照喜好组织应用目录结构，Laravel 对类在何处被加载没有任何限制 – 只要 Composer 可以自动载入它们即可。</p></blockquote><h4 id="为什么没有-Models-目录"><a href="#为什么没有-Models-目录" class="headerlink" title="为什么没有 Models 目录?"></a>为什么没有 Models 目录?</h4><p>许多初学者都会困惑 Laravel 为什么没有 models 目录,当然，这是 laravel 故意为之，因为 models 这个词对不同开发者而言有不同的含义，容易造成歧义，有些开发者认为应用的模型指的是业务逻辑，还有些开发者则认为模型指的是与关联数据库的交互。</p><p>正是因为如此，我们默认将 Eloquent 的模型放置到 app 目录下，从而允许开发者自行选择放置的位置。</p><h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h2><h3 id="app-目录"><a href="#app-目录" class="headerlink" title="app 目录"></a>app 目录</h3><p>app 目录，如你所料，这里面包含应用程序的核心代码。另外，你为应用编写的代码绝大多数也会放到这里， 我们之后将很快对这个目录的细节进行深入探讨。</p><h3 id="bootstrap-目录"><a href="#bootstrap-目录" class="headerlink" title="bootstrap 目录"></a>bootstrap 目录</h3><p>bootstrap目录包含了几个框架启动和自动加载设置的文件。cache 文件夹用于包含框架为提升性能所生成的文件，如路由和服务缓存文件。</p><h3 id="config-目录"><a href="#config-目录" class="headerlink" title="config 目录"></a>config 目录</h3><p>config 目录，顾名思义，包含所有应用程序的配置文件。通读这些配置文件可以应对自己对配置修改的需求。</p><h3 id="database-目录"><a href="#database-目录" class="headerlink" title="database 目录"></a>database 目录</h3><p>database 目录包含了数据迁移及填充文件，你还可以将其作为 SQLite 数据库的存放目录。</p><h3 id="public-目录"><a href="#public-目录" class="headerlink" title="public 目录"></a>public 目录</h3><p>public 目录包含了 Laravel 的 HTTP 入口文件 index.php 和前端资源文件（图片、JavaScript、CSS等）。</p><h3 id="resources-目录"><a href="#resources-目录" class="headerlink" title="resources 目录"></a>resources 目录</h3><p>resources 目录包含了视图、原始的资源文件 (LESS、SASS、CoffeeScript) ，以及语言包。</p><h3 id="routes-目录"><a href="#routes-目录" class="headerlink" title="routes 目录"></a>routes 目录</h3><p>routes 目录包含了应用的所有路由定义。Laravel 默认提供了三个路由文件：web.php, api.php, 和 console.php。</p><p>web.php 文件里定义的路由都会在 RouteServiceProvider 中被指定应用到 web 中间件组，具备 Session 、CSRF 防护以及 Cookie 加密功能，如果应用无需提供无状态的、RESTful 风格的API，所有路由都会定义在 web.php 文件。</p><p>api.php 文件里定义的路由都会在 RouteServiceProvider 中被指定应用到 api 中间件组，具备频率限制功能，这些路由是无状态的，所以请求通过这些路由进入应用需要通过 API 令牌进行认证并且不能访问 Session 状态。</p><p>console.php 文件用于定义所有基于闭包的控制台命令，每个闭包都被绑定到一个控制台命令并且允许与命令行 IO 方法进行交互，尽管这个文件并不定义 HTTP 路由，但是它定义了基于命令行的应用入口（路由）。</p><h3 id="storage-目录"><a href="#storage-目录" class="headerlink" title="storage 目录"></a>storage 目录</h3><p>storage 目录包含编译后的 Blade 模板、基于文件的 session、文件缓存和其它框架生成的文件。此文件夹分格成 app 、framework ，及 logs 目录。app 目录可用于存储应用程序使用的任何文件。framework 目录被用于保存框架生成的文件及缓存。最后，logs 目录包含了应用程序的日志文件。</p><p>storage/app/public 可以用来存储用户生成的文件，例如头像文件，这是一个公开的目录。你还需要在 public/storage 目录下生成一个软连接指向这个目录，你可以使用 php artisan storage:link 来创建软链接。</p><h3 id="tests-目录"><a href="#tests-目录" class="headerlink" title="tests 目录"></a>tests 目录</h3><p>tests 目录包含自动化测试。Laravel 推荐了一个 PHPUnit 例子。每一个测试类都需要添加 Test 前缀，你可以使用 <code>phpunit</code> 或者 <code>php vendor/bin/phpunit</code> 命令来运行测试。</p><h3 id="vendor-目录"><a href="#vendor-目录" class="headerlink" title="vendor 目录"></a>vendor 目录</h3><p>vendor 目录包含所有 Composer 依赖。</p><hr><h2 id="app-目录-1"><a href="#app-目录-1" class="headerlink" title="app 目录"></a>app 目录</h2><p>应用的核心代码位于 app 目录下，默认情况下，该目录位于命名空间 App 下， 并且被 Composer 通过 PSR-4 自动载入标准 自动加载。</p><p>app 目录下包含多个子目录，如 Console 、Http 、Providers 等。 其中 Console 和 Http 目录为进入应用程序核心提供了一个 API 。HTTP 协议和 CLI 是和应用进行交互的两种机制，但实际上并不包含应用逻辑。换句话说，它们是两种简单地发布命令给应用程序的方法。Console 目录包含你全部的 Artisan 命令，而 Http 目录包含你的控制器、中间件和请求。</p><p>其他目录将会在你通过 Artisan 命令 <code>make</code> 生成相应类的时候生成到 app 目录下。例如，app/Jobs 目录在你执行 <code>make:job</code> 命令生成任务类时，才会出现在 app 目录下。</p><p>app 目录中的很多类都可以通过 Artisan 命令生成，要查看所有有效的命令，可以在终端中运行 <code>php artisan list make</code> 命令。</p><h3 id="Console-目录"><a href="#Console-目录" class="headerlink" title="Console 目录"></a>Console 目录</h3><p>Console 目录包含应用所有自定义的 Artisan 命令，这些命令类可以使用 <code>make:command</code> 命令生成。该目录下还有 Console Kernel 类，在这里可以注册自定义的 Artisan 命令以及定义调度任务。</p><h3 id="Events-目录"><a href="#Events-目录" class="headerlink" title="Events 目录"></a>Events 目录</h3><p>Events 目录默认不存在，它会在你使用 <code>event:generate</code> 或者 <code>event:make</code> 命令以后才会生成。如你所料，此目录是用来放置 事件类 的。事件类用于当指定事件发生时，通知应用程序的其它部分，并提供了很棒的灵活性及解耦。</p><h3 id="Exceptions-目录"><a href="#Exceptions-目录" class="headerlink" title="Exceptions 目录"></a>Exceptions 目录</h3><p>Exceptions 目录包含应用的异常处理，同时还是处理应用抛出的任何异常的好位置。如果你想自定义异常的记录和渲染，你应该修改此目录下的 Handler 类。</p><h3 id="Http-目录"><a href="#Http-目录" class="headerlink" title="Http 目录"></a>Http 目录</h3><p>Http 目录包含了控制器、中间件以及表单请求等，几乎所有进入应用的请求处理都在这里进行。</p><h3 id="Jobs-目录"><a href="#Jobs-目录" class="headerlink" title="Jobs 目录"></a>Jobs 目录</h3><p>Jobs 目录默认不存在，可以通过执行 <code>make:job</code> 命令生成，Jobs 目录用于存放 队列任务，应用中的任务可以推送到队列，也可以在当前请求生命周期内同步执行。同步执行的任务有时也被看作命令，因为它们实现了 命令总线设计模式。</p><h3 id="Listeners-目录"><a href="#Listeners-目录" class="headerlink" title="Listeners 目录"></a>Listeners 目录</h3><p>Listeners 目录默认不存在，可以通过执行 <code>event:generate</code> 和 <code>make:listener</code> 命令创建。Listeners 目录包含处理 事件 的类（事件监听器），事件监听器接收一个事件并提供对该 事件发生后的响应逻辑，例如，UserRegistered 事件可以被 SendWelcomeEmail 监听器处理。</p><h3 id="Mail-目录"><a href="#Mail-目录" class="headerlink" title="Mail 目录"></a>Mail 目录</h3><p>Mail 目录默认不存在，但是可以通过执行 <code>make:mail</code> 命令生成，Mail 目录包含邮件发送类，邮件对象允许你在一个地方封装构建邮件所需的所有业务逻辑，然后使用 Mail::send 方法发送邮件。</p><h3 id="Notifications-目录"><a href="#Notifications-目录" class="headerlink" title="Notifications 目录"></a>Notifications 目录</h3><p>Notifications 目录默认不存在，你可以通过执行 <code>make:notification</code> 命令创建， Notifications 目录包含应用发送的所有通知，比如事件发生通知。Laravel 的通知功能将通知发送和通知驱动解耦，你可以通过邮件，也可以通过 Slack、短信或者数据库发送通知。</p><h3 id="Policies-目录"><a href="#Policies-目录" class="headerlink" title="Policies 目录"></a>Policies 目录</h3><p>Policies 你可以通过执行 <code>make:policy</code> 命令来创建， Policies  目录包含了所有的授权策略类，策略用于判断某个用户是否有权限去访问指定资源。更多详情，请查看 授权文档。</p><h3 id="Providers-目录"><a href="#Providers-目录" class="headerlink" title="Providers 目录"></a>Providers 目录</h3><p>Providers 目录包含应用的 服务提供者 。服务提供者在启动应用过程中绑定服务到容器、注册事件，以及执行其他任务，为即将到来的请求处理做准备。</p><p>在新安装的 Laravel 应用中，该目录已经包含了一些服务提供者，你可以按需添加自己的服务提供者到该目录。</p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> download </tag>
            
            <tag> install </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>composer快速入门</title>
      <link href="/20170819/composer-get-start/"/>
      <url>/20170819/composer-get-start/</url>
      <content type="html"><![CDATA[<p>安装好后就可以开始使用<code>composer</code>命令了。</p><p>这里我们那phpmailer举例子。例如你的项目需要用到phpmailer来发邮件。只需要两步：<code>下载</code>-&gt;<code>加载使用</code>。</p><a id="more"></a><h2 id="composer快速入门"><a href="#composer快速入门" class="headerlink" title="composer快速入门"></a>composer快速入门</h2><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>命令：<code>composer require phpmailer/phpmailer</code><br>使用上面这个命令进行安装<code>phpmailer</code>。<br>执行完成后会看到生成<code>vendor/phpmailer</code> ，这样phpmailer就已经下载到你项目里面了。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>引用类库。在你需要的使用的项目的文件里面加上着行代码。（这是统一格式无需修改）。<br><code>require &#39;vendor/autoload.php&#39;;</code></p><h2 id="接下来就可以使用了。详细内容可以参考phpmailer手册。"><a href="#接下来就可以使用了。详细内容可以参考phpmailer手册。" class="headerlink" title="接下来就可以使用了。详细内容可以参考phpmailer手册。"></a>接下来就可以使用了。详细内容可以参考phpmailer手册。</h2><p>这里附上一个案例：<br>在根目录创建一个<code>test.php</code>文件。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送邮件 **实际项目改成你的配置文件**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016年11月14日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yexk &lt;yexk<span class="doctag">@yexk</span>.cn&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> String $address 收件人邮箱地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $message 内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $title   主题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean        成功返回true,否则false</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send_mail</span><span class="params">($address,$message=<span class="string">''</span>,$title=<span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    date_default_timezone_set(<span class="string">"Asia/Shanghai"</span>);<span class="comment">//设定时区东八区</span></span><br><span class="line">    $mail = <span class="keyword">new</span> \PHPMailer();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置smtp参数</span></span><br><span class="line">    <span class="comment">// $mail-&gt;SMTPDebug = 3;</span></span><br><span class="line">    $mail-&gt;IsSMTP();</span><br><span class="line">    $mail-&gt;SMTPAuth  = <span class="keyword">true</span>;</span><br><span class="line">    $mail-&gt;SMTPKeepAlive = <span class="keyword">true</span>;</span><br><span class="line">    $mail-&gt;SMTPSecure = <span class="string">'ssl'</span>;</span><br><span class="line">    $mail-&gt;CharSet = <span class="string">'UTF-8'</span>; <span class="comment">// 设置字符集编码</span></span><br><span class="line">    $mail-&gt;Host    = <span class="string">'smtp.exmail.qq.com'</span>;    <span class="comment">// 主机</span></span><br><span class="line">    $mail-&gt;Port    = <span class="string">'465'</span>;    <span class="comment">// 端口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//填写你的mail账号和密码 </span></span><br><span class="line">    $mail-&gt;Username=<span class="string">'test@yexk.cn'</span>; <span class="comment">// </span></span><br><span class="line">    $mail-&gt;Password=<span class="string">'xxxxxxxxxxx'</span>; <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置发送方，最好不要伪造地址</span></span><br><span class="line">    $mail-&gt;From    = <span class="string">'test@yexk.cn'</span>;</span><br><span class="line">    $mail-&gt;FromName  = <span class="string">'test'</span>;<span class="comment">// 发件人的名字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strlen($title)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $mail-&gt;Subject=$title;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $mail-&gt;Subject=<span class="string">'scInternal内网系统'</span>;</span><br><span class="line">    &#125;<span class="comment">// 邮件主题</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// $mail-&gt;WordWrap  = 50; // 设置自动换行</span></span><br><span class="line">    $mail-&gt;MsgHTML($message); <span class="comment">// 发件内容</span></span><br><span class="line">    <span class="comment">//设置邮件接收方的邮箱和姓名</span></span><br><span class="line">    $mail-&gt;AddAddress($address,$address);</span><br><span class="line">    <span class="comment">//使用HTML格式发送邮件</span></span><br><span class="line">    $mail-&gt;IsHTML(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//通过Send方法发送邮件</span></span><br><span class="line">    <span class="comment">//根据发送结果做相应处理</span></span><br><span class="line">    <span class="keyword">if</span>(!$mail-&gt;Send())</span><br><span class="line">    &#123;</span><br><span class="line">        $msg = <span class="string">'['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">' ==&gt; '</span> . $mail-&gt;ErrorInfo .<span class="string">"]"</span> . PHP_EOL;</span><br><span class="line">        file_put_contents(<span class="string">'send_mail.log'</span>, $msg ,FILE_APPEND);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(send_mail(<span class="string">'yexk@yexk.cn'</span>,<span class="string">'测试composer'</span>));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
            <tag> phpmailer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>composer安装和使用</title>
      <link href="/20170819/composer-install/"/>
      <url>/20170819/composer-install/</url>
      <content type="html"><![CDATA[<blockquote><p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。</p></blockquote><a id="more"></a><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p><strong>composer的用途</strong>：<br>a) 你有一个项目依赖于若干个库。<br>b) 其中一些库依赖于其他库。<br>c) 你声明你所依赖的东西。<br>d) Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>下载 Composer 的可执行文件</p><h3 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h3><blockquote><p>要真正获取 Composer，我们需要做两件事。首先安装 Composer （同样的，这意味着它将下载到你的项目中）：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure><blockquote><p>注意： 如果上述方法由于某些原因失败了，你还可以通过 php &gt;下载安装器：<br><code>php -r &quot;readfile(&#39;https://getcomposer.org/installer&#39;);&quot; | php</code>   </p></blockquote><p>你可以通过 –install-dir 选项指定 Composer 的安装目录（它可以是一个绝对或相对路径）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php -- --install-dir=bin</span><br></pre></td></tr></table></figure></p><h3 id="全局安装-推荐"><a href="#全局安装-推荐" class="headerlink" title="全局安装(推荐)"></a>全局安装(推荐)</h3><p>你可以将此文件放在任何地方。如果你把它放在系统的 PATH 目录中，你就能在全局访问它。 在类Unix系统中，你甚至可以在使用时不加 php 前缀。</p><p>你可以执行这些命令让 composer 在你的系统中进行全局调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure></p><blockquote><p>注意： 如果上诉命令因为权限执行失败， 请使用 sudo 再次尝试运行 mv 那行命令。</p></blockquote><p>现在只需要运行 composer 命令就可以使用 Composer 而不需要输入 php composer.phar。</p><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><p>使用安装程序 <a href="http://pan.baidu.com/s/1i5qVZud" target="_blank" rel="noopener">Composer-Setup.exe</a> 附上下载链接：<a href="http://pan.baidu.com/s/1i5qVZud" target="_blank" rel="noopener">http://pan.baidu.com/s/1i5qVZud</a></p><p>这是将 Composer 安装在你机器上的最简单的方法。</p><p>下载并且运行 <a href="http://pan.baidu.com/s/1i5qVZud" target="_blank" rel="noopener"><code>Composer-Setup.exe</code></a>，它将安装最新版本的 Composer ，并设置好系统的环境变量，因此你可以在任何目录下直接使用 <code>composer</code> 命令。</p><p><strong><span style="color:red">注意：win10电脑必须用管理员权限安装！！！</span></strong></p><hr><blockquote><p>由于改软件的服务器在国外。国内的速度。。。你懂的。。这里我们需要改成中国的镜像。</p></blockquote><h2 id="镜像用法"><a href="#镜像用法" class="headerlink" title="镜像用法"></a>镜像用法</h2><p>有两种方式启用本镜像服务：</p><ul><li><strong>系统全局配置</strong>： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”</li><li><strong>单个项目配置</strong>： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”</li></ul><h3 id="方法一：-修改-composer-的全局配置文件（推荐方式）"><a href="#方法一：-修改-composer-的全局配置文件（推荐方式）" class="headerlink" title="方法一： 修改 composer 的全局配置文件（推荐方式）"></a>方法一： 修改 composer 的全局配置文件（推荐方式）</h3><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><h3 id="方法二：-修改当前项目的-composer-json-配置文件："><a href="#方法二：-修改当前项目的-composer-json-配置文件：" class="headerlink" title="方法二： 修改当前项目的 composer.json 配置文件："></a>方法二： 修改当前项目的 composer.json 配置文件：</h3><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;laravel/laravel&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;The Laravel Framework.&quot;,</span><br><span class="line">    &quot;keywords&quot;: [&quot;framework&quot;, &quot;laravel&quot;],</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;project&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;php&quot;: &quot;&gt;=5.5.9&quot;,</span><br><span class="line">        &quot;laravel/framework&quot;: &quot;5.2.*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;preferred-install&quot;: &quot;dist&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;repositories&quot;: &#123;</span><br><span class="line">        &quot;packagist&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，一切搞定！试一下 composer install 来体验飞一般的速度吧！</p><p>查看修改成功了没有？<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line"><span class="meta">#</span> composer config -g -l</span><br><span class="line">[repositories.packagist.org.type] composer</span><br><span class="line">[repositories.packagist.org.url] https?://packagist.org</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line"><span class="meta">#</span> composer config -g -l</span><br><span class="line">[repositories.packagist.org.type] composer</span><br><span class="line">[repositories.packagist.org.url] https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p><p>这样就代表修改成功咯！！</p>]]></content>
      
      <categories>
          
          <category> composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery常用的方法</title>
      <link href="/20170818/jquery-common-function/"/>
      <url>/20170818/jquery-common-function/</url>
      <content type="html"><![CDATA[<blockquote><p>个人总结一些工作中必须使用和掌握的jQuery方法。</p></blockquote><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol><li><p><code>attr(name|properties|key,value|fn)</code> : 对元素属性的操作。（<code>prop()</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>); <span class="comment">// 获取a标签的href属性值。</span></span><br><span class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>,<span class="string">'http://yexk.cn'</span>); <span class="comment">// 给a标签的一个属性赋值。</span></span><br><span class="line">$(<span class="string">'a'</span>).attr(&#123;<span class="string">'href'</span>:<span class="string">'http://yexk.cn'</span>,<span class="string">'title'</span>:<span class="string">'Yexk'</span>&#125;); <span class="comment">// 给a标签的多个属性赋值。</span></span><br></pre></td></tr></table></figure></li><li><p><code>removeAttr(name)</code> : 移除元素属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).removeAttr(<span class="string">'href'</span>); <span class="comment">// 移除一个href属性</span></span><br></pre></td></tr></table></figure></li><li><p><code>addClass(class|fn)</code> ：添加一个class（类）名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"div"</span>).addClass(<span class="string">'show_div'</span>);</span><br><span class="line">&lt;!-- <span class="comment">// 结果： --&gt;</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"show_div"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>removeClass([class|fn])</code> : 移除元素的class（类）名。<br> 和3使用方法相同，效果相反。</p></li><li><p><code>html([val|fn])</code> : 对元素的内容进行操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).html(<span class="string">'&lt;p&gt;我是动态追加的&lt;/p&gt;'</span>); <span class="comment">// 添加内容。</span></span><br><span class="line">$(<span class="string">'div'</span>).html(); <span class="comment">// 获取内容 </span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">''</span>); <span class="comment">// 删除内容</span></span><br></pre></td></tr></table></figure></li><li><p><code>val([val|fn])</code> ：对元素的value值进行操作。<br> 使用方法和5相同。</p></li></ol><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol><li>ID 选择器<ul><li><code>#id</code></li></ul></li><li>class 选择器<ul><li><code>.class</code></li></ul></li><li>属性选择器<ul><li><code>[attribute]</code></li><li><code>[attribute=value]</code> </li></ul></li><li>表单选择器<ul><li><code>:input</code></li><li><code>:submit</code></li><li><code>:selected</code></li></ul></li><li>层级选择器<ul><li><code>#id .class</code></li></ul></li><li>混搭使用<ul><li><code>#id .class input[type=&quot;text&quot;]</code></li></ul></li></ol><h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><ol><li><p><code>hasClass(class)</code> ：检查当前的元素是否含有某个特定的类，如果有，则返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// html代码 --&gt;</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></span><br><span class="line">$(<span class="string">'div'</span>).hasClass(<span class="string">'show'</span>); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure></li><li><p><code>children([expr])</code> : 获取当前对象的子集（被选中的）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// html代码 --&gt;</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li class="li_ele"&gt;2&lt;/</span>li&gt;</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"li_ele"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></span><br><span class="line">$(<span class="string">'ul'</span>).children(<span class="string">'.li_ele'</span>); <span class="comment">// 获取到了第二个和第三个li元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>find(expr|obj|ele)</code> : 获取当前对象的子集（被选中的）。<br> 使用方式同上    </p></li><li><code>parent([expr])</code> : 获取当前对象的父集。<br> 使用方式同上    </li><li><code>prev([expr])</code> ：获取当前对象的前一个。<br> 使用方式同上    </li><li><code>next([expr])</code> ：获取当前对象的后一个。<br> 使用方式同上    </li><li><code>siblings([expr])</code> : 获取当前对象的所有同级元素。<br> 使用方式同上</li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li><p><code>on(events,[selector],[data],fn)</code> ：在选择元素上绑定一个或多个事件的事件处理函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* Act on the event */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 打印div</span></span><br><span class="line">&#125;); <span class="comment">// 给div加上点击事件。</span></span><br></pre></td></tr></table></figure></li><li><p><code>off(events,[selector],[fn])</code> ：在选择元素上移除一个或多个事件的事件处理函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).off(<span class="string">'click'</span>); <span class="comment">// 去掉div的单击事件。</span></span><br></pre></td></tr></table></figure></li><li><p><code>trigger(type,[data])</code> ：在每一个匹配的元素上触发某类事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form'</span>).trigger(<span class="string">'submit'</span>); <span class="comment">// 触发表单提交事件。</span></span><br></pre></td></tr></table></figure></li><li><p><code>triggerHandler(type, [data])</code> ：触发指定的事件类型上所有绑定的处理函数。<br> 使用方法同上</p><blockquote><p>如果你对一个focus事件执行了 .triggerHandler() ，浏览器默认动作将不会被触发，只会触发你绑定的动作。</p></blockquote><p> ps : 这个方法的行为表现与trigger类似，但有以下三个主要区别： </p><ul><li>第一，他不会触发浏览器默认事件。</li><li>第二，只触发jQuery对象集合中第一个元素的事件处理函数。</li><li>第三，这个方法的返回的是事件处理函数的返回值，而不是据有可链性的jQuery对象。此外，如果最开始的jQuery对象集合为空，则这个方法返回 undefined。</li></ul></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol><li><p><code>show([speed,[easing],[fn]])</code> ：显示隐藏的匹配元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码 --&gt;</span></span><br><span class="line">&lt;p style=<span class="string">"display: none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></span><br><span class="line">$(<span class="string">'p'</span>).show(); <span class="comment">// 立即显示。如果想显示动画可以传时间进去。`$('P').show(1000)`</span></span><br></pre></td></tr></table></figure></li><li><p><code>hide([speed,[easing],[fn]])</code> ：隐藏显示的元素。<br> 使用方法同上</p></li><li><p><code>animate(params,[speed],[easing],[fn])</code> : 用于创建自定义动画的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;button id=<span class="string">"run"</span>&gt;Run&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="ye_animate"&gt;Hello!&lt;/</span>div&gt;</span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"#run"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#ye_animate"</span>).animate(&#123; </span><br><span class="line">    width: <span class="string">"90%"</span>,</span><br><span class="line">    height: <span class="string">"100%"</span>,</span><br><span class="line">    fontSize: <span class="string">"10em"</span></span><br><span class="line">  &#125;, <span class="number">1000</span> );</span><br><span class="line">&#125;); <span class="comment">// 在一个动画中同时应用三种类型的效果。</span></span><br></pre></td></tr></table></figure></li><li><p><code>stop([clearQueue],[jumpToEnd])</code> ：立即停止动画效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设上面的已经点击了‘Run’。我们在创建一个stop按钮。</span></span><br><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;button id=<span class="string">"stop"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#ye_animate"</span>).stop();</span><br><span class="line">&#125;); <span class="comment">// 立即停止动画。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ol><li><p><code>jQuery.ajax(url,[settings])</code> : 创建同步或者异步的 HTTP 请求加载远程数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">'/path/to/file'</span>, <span class="comment">// 请求的路径</span></span><br><span class="line">type: <span class="string">'default GET (Other values: POST)'</span>, <span class="comment">// 请求的类型</span></span><br><span class="line">dataType: <span class="string">'default: Intelligent Guess (Other values: xml, json, script, or html)'</span>, <span class="comment">// 请求头的数据类型。</span></span><br><span class="line"><span class="keyword">async</span> : <span class="literal">true</span> , <span class="comment">// 同步或者异步， （默认是TRUE，异步。）</span></span><br><span class="line">data: &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="comment">// 请求的参数。</span></span><br><span class="line">beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 请求发送到请求返回前的时间。</span></span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码。</span></span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 请求失败后。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.get(url, [data], [callback], [type])</code> : 默认是GET请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'/path/to/file'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.post(url, [data], [callback], [type])</code> ： 默认是POST请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'/path/to/file'</span>, &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, xhr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.getScript(url, [callback])</code> ：GET 请求载入并执行一个 JavaScript 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.getScript(<span class="string">"/path/to/file"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><ol><li><p><code>each(callback)</code> : 遍历对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;img/&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.src = <span class="string">"test"</span> + i + <span class="string">".jpg"</span>; <span class="comment">// this指向调用着。（原生的dom对象）</span></span><br><span class="line"> &#125;);</span><br><span class="line">&lt;!-- <span class="comment">// 结果： --&gt;</span></span><br><span class="line">&lt;img src=<span class="string">"test0.jpg"</span> /&gt;&lt;img src="test1.jpg" /&gt;&lt;img src="test2.jpg" /&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>data([key],[value])</code> : 在一个div上存取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">//HTML 代码: --&gt;</span></span><br><span class="line">&lt;div data-index=<span class="string">"ye_cs"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"div"</span>).data(<span class="string">"index"</span>);  <span class="comment">// ye_cs</span></span><br><span class="line">$(<span class="string">"div"</span>).data(<span class="string">"str"</span>, <span class="string">"hello world"</span>);  <span class="comment">// blah设置为hello</span></span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.each(object, [callback])</code> ： 遍历对象。<br> 使用方式同1。</p></li><li><code>jQuery.type(obj)</code> : 检测obj的数据类型。<ul><li>jQuery.type(true)         === “boolean”</li><li>jQuery.type(3)            === “number”</li><li>jQuery.type(“test”)       === “string”</li><li>jQuery.type(function(){}) === “function”</li><li>jQuery.type([])           === “array”</li><li>jQuery.type(new Date())   === “date”</li><li>jQuery.type(/test/)       === “regexp”</li></ul></li><li><p><code>event.preventDefault()</code> ：阻止默认事件行为的触发。</p></li><li><p><code>serialize()</code> ：序列表表格内容为字符串。</p></li></ol>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
            <tag> jquery </tag>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP常用的函数</title>
      <link href="/20170816/php-common-function/"/>
      <url>/20170816/php-common-function/</url>
      <content type="html"><![CDATA[<h3 id="1-去掉UTF8-BOM-头"><a href="#1-去掉UTF8-BOM-头" class="headerlink" title="1. 去掉UTF8 BOM 头"></a>1. 去掉UTF8 BOM 头</h3><blockquote><p>通过手动去除文件里面的bom实现。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 去掉UTF8 Bom头</span><br><span class="line"> * Remove UTF8 Bom </span><br><span class="line"> * </span><br><span class="line"> * @param  string    $string </span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">function remove_utf8_Bom($string)</span><br><span class="line">&#123;</span><br><span class="line">    if(substr($string, 0, 3) == pack(&apos;CCC&apos;, 239, 187, 191)) return substr($string, 3);</span><br><span class="line">    return $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-增强substr字符截取函数（支持UTF8）"><a href="#2-增强substr字符截取函数（支持UTF8）" class="headerlink" title="2. 增强substr字符截取函数（支持UTF8）"></a>2. 增强substr字符截取函数（支持UTF8）</h3><blockquote><p>当你的php没有开启mb_string函数扩展的时候就需要自己手动去书写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 增强substr方法：支持多字节语言，比如中文。</span><br><span class="line">    * Enhanced substr version: support multibyte languages like Chinese.</span><br><span class="line">    *</span><br><span class="line">    * @param string $string</span><br><span class="line">    * @param int $length </span><br><span class="line">    * @param string $append </span><br><span class="line">    * @return string </span><br><span class="line">    **/</span><br><span class="line">   function substr($string, $length, $append = &apos;&apos;)</span><br><span class="line">   &#123;</span><br><span class="line">       if (strlen($string) &lt;= $length ) $append = &apos;&apos;;</span><br><span class="line">       if(function_exists(&apos;mb_substr&apos;)) return mb_substr($string, 0, $length, &apos;utf-8&apos;) . $append;</span><br><span class="line"></span><br><span class="line">       preg_match_all(&quot;/./su&quot;, $string, $data);</span><br><span class="line">       return join(&quot;&quot;, array_slice($data[0],  0, $length)) . $append;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-判断是不是ajax请求"><a href="#3-判断是不是ajax请求" class="headerlink" title="3. 判断是不是ajax请求"></a>3. 判断是不是ajax请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 检查是否是AJAX请求</span><br><span class="line"> * Check is ajax request.</span><br><span class="line"> * </span><br><span class="line"> * @return bool</span><br><span class="line"> */</span><br><span class="line">function is_ajax()</span><br><span class="line">&#123;</span><br><span class="line">    $isAjax = isset($_SERVER[&apos;HTTP_X_REQUESTED_WITH&apos;]) &amp;&amp; $_SERVER[&apos;HTTP_X_REQUESTED_WITH&apos;] == &apos;XMLHttpRequest&apos;;</span><br><span class="line">    if(!$isAjax) $isAjax = (isset($_GET[&apos;HTTP_X_REQUESTED_WITH&apos;]) &amp;&amp; $_GET[&apos;HTTP_X_REQUESTED_WITH&apos;] == &apos;true&apos;);</span><br><span class="line">    return $isAjax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-获取浏览器类型。"><a href="#4-获取浏览器类型。" class="headerlink" title="4. 获取浏览器类型。"></a>4. 获取浏览器类型。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取浏览器类型。</span><br><span class="line"> * Get browser.</span><br><span class="line"> *</span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">function get_browser()</span><br><span class="line">&#123;</span><br><span class="line">    if(empty($_SERVER[&apos;HTTP_USER_AGENT&apos;])) return &apos;unknow&apos;;</span><br><span class="line"></span><br><span class="line">    $agent = $_SERVER[&quot;HTTP_USER_AGENT&quot;];</span><br><span class="line">    if(strpos($agent, &apos;MSIE&apos;) !== false || strpos($agent, &apos;rv:11.0&apos;)) </span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;ie&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(strpos($agent, &apos;Firefox&apos;) !== false)</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;firefox&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(strpos($agent, &apos;Chrome&apos;) !== false)</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;chrome&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(strpos($agent, &apos;Opera&apos;) !== false)</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;opera&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if((strpos($agent, &apos;Chrome&apos;) == false) &amp;&amp; strpos($agent, &apos;Safari&apos;) !== false)</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;safari&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;unknown&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-获取浏览器版本"><a href="#5-获取浏览器版本" class="headerlink" title="5. 获取浏览器版本"></a>5. 获取浏览器版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取浏览器版本</span><br><span class="line"> * Get browser version. </span><br><span class="line"> * </span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">function get_browser_version()</span><br><span class="line">&#123;</span><br><span class="line">    if(empty($_SERVER[&apos;HTTP_USER_AGENT&apos;])) return &apos;unknow&apos;;</span><br><span class="line"></span><br><span class="line">    $agent = $_SERVER[&apos;HTTP_USER_AGENT&apos;];   </span><br><span class="line">    if(preg_match(&apos;/MSIE\s(\d+)\..*/i&apos;, $agent, $regs))</span><br><span class="line">    &#123;</span><br><span class="line">        return $regs[1];</span><br><span class="line">    &#125;</span><br><span class="line">    else if(preg_match(&apos;/FireFox\/(\d+)\..*/i&apos;, $agent, $regs))</span><br><span class="line">    &#123;</span><br><span class="line">        return $regs[1];</span><br><span class="line">    &#125;</span><br><span class="line">    else if(preg_match(&apos;/Opera[\s|\/](\d+)\..*/i&apos;, $agent, $regs))</span><br><span class="line">    &#123;</span><br><span class="line">        return $regs[1];</span><br><span class="line">    &#125;</span><br><span class="line">    else if(preg_match(&apos;/Chrome\/(\d+)\..*/i&apos;, $agent, $regs))</span><br><span class="line">    &#123;</span><br><span class="line">        return $regs[1];</span><br><span class="line">    &#125;</span><br><span class="line">    else if((strpos($agent,&apos;Chrome&apos;) == false) &amp;&amp; preg_match(&apos;/Safari\/(\d+)\..*$/i&apos;, $agent, $regs))</span><br><span class="line">    &#123;</span><br><span class="line">        return $regs[1];</span><br><span class="line">    &#125;</span><br><span class="line">    else if(preg_match(&apos;/rv:(\d+)\..*/i&apos;, $agent, $regs))</span><br><span class="line">    &#123;</span><br><span class="line">        return $regs[1];</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;unknow&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-获取客服端的操作系统"><a href="#6-获取客服端的操作系统" class="headerlink" title="6. 获取客服端的操作系统"></a>6. 获取客服端的操作系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取客户端操作系统</span><br><span class="line"> * Get client os from agent info. </span><br><span class="line"> * </span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">function get_os()</span><br><span class="line">&#123;</span><br><span class="line">    if(empty($_SERVER[&apos;HTTP_USER_AGENT&apos;])) return &apos;unknow&apos;;</span><br><span class="line"></span><br><span class="line">    $osList = array(</span><br><span class="line">        &apos;/windows nt 10/i&apos;      =&gt;  &apos;Windows 10&apos;,</span><br><span class="line">        &apos;/windows nt 6.3/i&apos;     =&gt;  &apos;Windows 8.1&apos;,</span><br><span class="line">        &apos;/windows nt 6.2/i&apos;     =&gt;  &apos;Windows 8&apos;,</span><br><span class="line">        &apos;/windows nt 6.1/i&apos;     =&gt;  &apos;Windows 7&apos;,</span><br><span class="line">        &apos;/windows nt 6.0/i&apos;     =&gt;  &apos;Windows Vista&apos;,</span><br><span class="line">        &apos;/windows nt 5.2/i&apos;     =&gt;  &apos;Windows Server 2003/XP x64&apos;,</span><br><span class="line">        &apos;/windows nt 5.1/i&apos;     =&gt;  &apos;Windows XP&apos;,</span><br><span class="line">        &apos;/windows xp/i&apos;         =&gt;  &apos;Windows XP&apos;,</span><br><span class="line">        &apos;/windows nt 5.0/i&apos;     =&gt;  &apos;Windows 2000&apos;,</span><br><span class="line">        &apos;/windows me/i&apos;         =&gt;  &apos;Windows ME&apos;,</span><br><span class="line">        &apos;/win98/i&apos;              =&gt;  &apos;Windows 98&apos;,</span><br><span class="line">        &apos;/win95/i&apos;              =&gt;  &apos;Windows 95&apos;,</span><br><span class="line">        &apos;/win16/i&apos;              =&gt;  &apos;Windows 3.11&apos;,</span><br><span class="line">        &apos;/macintosh|mac os x/i&apos; =&gt;  &apos;Mac OS X&apos;,</span><br><span class="line">        &apos;/mac_powerpc/i&apos;        =&gt;  &apos;Mac OS 9&apos;,</span><br><span class="line">        &apos;/linux/i&apos;              =&gt;  &apos;Linux&apos;,</span><br><span class="line">        &apos;/ubuntu/i&apos;             =&gt;  &apos;Ubuntu&apos;,</span><br><span class="line">        &apos;/iphone/i&apos;             =&gt;  &apos;iPhone&apos;,</span><br><span class="line">        &apos;/ipod/i&apos;               =&gt;  &apos;iPod&apos;,</span><br><span class="line">        &apos;/ipad/i&apos;               =&gt;  &apos;iPad&apos;,</span><br><span class="line">        &apos;/android/i&apos;            =&gt;  &apos;Android&apos;,</span><br><span class="line">        &apos;/blackberry/i&apos;         =&gt;  &apos;BlackBerry&apos;,</span><br><span class="line">        &apos;/webos/i&apos;              =&gt;  &apos;Mobile&apos;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    foreach ($osList as $regex =&gt; $value)</span><br><span class="line">    &#123; </span><br><span class="line">        if(preg_match($regex, $_SERVER[&apos;HTTP_USER_AGENT&apos;])) return $value; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    return &apos;unknown&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-检查IP是否合法"><a href="#7-检查IP是否合法" class="headerlink" title="7. 检查IP是否合法"></a>7. 检查IP是否合法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 检查IP是否合法。</span><br><span class="line"> * Check ip avaliable.  </span><br><span class="line"> * </span><br><span class="line"> * @param  string $ip </span><br><span class="line"> * @return bool</span><br><span class="line"> */</span><br><span class="line">function check_ip($ip)</span><br><span class="line">&#123;</span><br><span class="line">    $ip = trim($ip);</span><br><span class="line">    if(strpos($ip, &apos;/&apos;) !== false)</span><br><span class="line">    &#123;</span><br><span class="line">        $s = explode(&apos;/&apos;, $ip);</span><br><span class="line">        preg_match(&apos;/^(((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)(\.((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))&#123;3&#125;)$/&apos;, $s[0], $matches);</span><br><span class="line">        if(!empty($matches) and $s[1] &gt; 0 and $s[1] &lt; 36) return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        preg_match(&apos;/^(((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)(\.((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))&#123;3&#125;)$/&apos;, $ip, $matches);</span><br><span class="line">        if(!empty($matches)) return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-创建随机的字符串"><a href="#8-创建随机的字符串" class="headerlink" title="8. 创建随机的字符串"></a>8. 创建随机的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 创建随机的字符串。</span><br><span class="line"> * Create random string. </span><br><span class="line"> * </span><br><span class="line"> * @param  int    $length </span><br><span class="line"> * @param  string $skip A-Z|a-z|0-9</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br><span class="line">function create_randomStr($length, $skip = &apos;&apos;)</span><br><span class="line">&#123;</span><br><span class="line">    $str  = &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;</span><br><span class="line">    $skip = str_replace(&apos;A-Z&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;, $skip);</span><br><span class="line">    $skip = str_replace(&apos;a-z&apos;, &apos;abcdefghijklmnopqrstuvwxyz&apos;, $skip);</span><br><span class="line">    $skip = str_replace(&apos;0-9&apos;, &apos;0123456789&apos;, $skip);</span><br><span class="line">    for($i = 0; $i &lt; strlen($skip); $i++)</span><br><span class="line">    &#123;</span><br><span class="line">        $str = str_replace($skip[$i], &apos;&apos;, $str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $strlen = strlen($str);</span><br><span class="line">    while($length &gt; strlen($str)) $str .= $str;</span><br><span class="line"></span><br><span class="line">    $str = str_shuffle($str); </span><br><span class="line">    return substr($str,0,$length); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-mask地址类型转换"><a href="#9-mask地址类型转换" class="headerlink" title="9. mask地址类型转换"></a>9. mask地址类型转换</h3><p>mask地址的类型转换，比如255.255.255.0 =&gt; 32<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 整形转字符型</span><br><span class="line"> * @Author Yexk</span><br><span class="line"> * @Date   2017-02-10</span><br><span class="line"> * @param  &#123;Int&#125;      $bit [数字类型：1-32]</span><br><span class="line"> * @return &#123;String&#125;        [mask字符串地址]</span><br><span class="line"> */</span><br><span class="line">public static function maskbit2ip($bit)</span><br><span class="line">&#123;</span><br><span class="line">    $bit    = intval($bit);</span><br><span class="line">    $lan    = ((1&lt;&lt;$bit) -1)&lt;&lt;(32-$bit) ;</span><br><span class="line">    $lan    = str_split(&apos;&apos;.decbin($lan), 8);</span><br><span class="line">    $maskip = bindec($lan[0]).&apos;.&apos;.bindec($lan[1]).&apos;.&apos;.bindec($lan[2]).&apos;.&apos;.bindec($lan[3]);</span><br><span class="line"></span><br><span class="line">    return $maskip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * mask转整形</span><br><span class="line"> * @Author Yexk</span><br><span class="line"> * @Date   2017-02-10</span><br><span class="line"> * @param  &#123;String&#125;   $ip [字符型:255.255.255.0]</span><br><span class="line"> * @return &#123;Int&#125;          [返回整形]</span><br><span class="line"> */</span><br><span class="line">public static function maskip2bit($ip)</span><br><span class="line">&#123;</span><br><span class="line">    $ips = explode(&apos;.&apos;,$ip);</span><br><span class="line">    if(!is_array($ips) || 4 != count($ips))&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $bit = (intval($ips[0])&lt;&lt;24) + (intval($ips[1])&lt;&lt;16) + (intval($ips[2])&lt;&lt;8) + intval($ips[3]);</span><br><span class="line">    $bit = decbin($bit);</span><br><span class="line">    $len = strlen($bit);</span><br><span class="line">    if(32 != $len)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    $masklen = 0;</span><br><span class="line">    $flag    = &apos;1&apos;;</span><br><span class="line">    for($i=0; $i&lt;32; $i++)&#123;</span><br><span class="line">        if(&apos;1&apos;==$bit[$i])&#123;</span><br><span class="line">            $masklen++;</span><br><span class="line">            if(&apos;1&apos;!=$flag)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $flag=$bit[$i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $masklen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> function </tag>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL遇到的问题</title>
      <link href="/20170816/mysql-question/"/>
      <url>/20170816/mysql-question/</url>
      <content type="html"><![CDATA[<h2 id="mysql5-7中datetime默认值设置0000-00-00失败的问题"><a href="#mysql5-7中datetime默认值设置0000-00-00失败的问题" class="headerlink" title="mysql5.7中datetime默认值设置0000-00-00失败的问题"></a>mysql5.7中datetime默认值设置0000-00-00失败的问题</h2><blockquote><p>问题：mysql5.7之后版本datetime默认值设置’0000-00-00’，出现异常：Invalid default value for ‘create_time’</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 例如这个表格：</span><br><span class="line">DROP TABLE IF EXISTS `test`;</span><br><span class="line">CREATE TABLE `test` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;自增ID&apos;,</span><br><span class="line">  `time` datetime NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos; COMMENT &apos;添加时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>添加的时候就会报错：<br><img src="/20170816/mysql-question/mysql_default_value.jpg"></p><p>这个时候在MySQL的配置文件的<code>[mysqld]</code>中加入：<br><code>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code><br><img src="/20170816/mysql-question/mysql_default_value_conf.jpg"></p><p>最后重启再导入就行了。</p><blockquote><p>附上原文链接 <a href="http://blog.csdn.net/sd4493091/article/details/54947851" target="_blank" rel="noopener">http://blog.csdn.net/sd4493091/article/details/54947851</a> (此处对原文稍作修改)</p></blockquote><h2 id="MySQL解决-Err-1206-The-total-number-of-locks-exceeds-the-lock-table-size问题"><a href="#MySQL解决-Err-1206-The-total-number-of-locks-exceeds-the-lock-table-size问题" class="headerlink" title="MySQL解决[Err] 1206 - The total number of locks exceeds the lock table size问题"></a>MySQL解决[Err] 1206 - The total number of locks exceeds the lock table size问题</h2><blockquote><p>默认缓冲区的文件大小问题。。</p></blockquote><p>在配置文件改成一个较大的大小就行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size = 2G</span><br></pre></td></tr></table></figure></p><h2 id="mysql的蠕虫复制"><a href="#mysql的蠕虫复制" class="headerlink" title="mysql的蠕虫复制"></a>mysql的蠕虫复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into test1 (name) select name from test1;</span><br></pre></td></tr></table></figure><h1 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h1><p>在本机先使用root用户登录mysql： mysql -u root -p”youpassword” 进行授权操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'youpassword' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>重载授权表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 常见问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LINUX PPPoE IPv6的环境搭建</title>
      <link href="/20170815/linux-pppoe-server/"/>
      <url>/20170815/linux-pppoe-server/</url>
      <content type="html"><![CDATA[<h2 id="设备环境："><a href="#设备环境：" class="headerlink" title="设备环境："></a>设备环境：</h2><ul><li>操作系统：<code>Centos 7 x64</code></li><li>使用软件：<code>ppp</code> ,  <code>rp-pppoe</code>,  <code>radvd</code> ,  <code>kea dhcp</code></li></ul><h2 id="软件安装："><a href="#软件安装：" class="headerlink" title="软件安装："></a>软件安装：</h2><p>这里使用的在线安装。离线安装的自己去google下安装环境</p><a id="more"></a><ol><li>rp-pppoe-3.11-5.el7.x86_64 </li><li>ppp-2.4.5-33.el7.x86_64</li><li>radvd-1.9.2-9.el7.x86_64</li><li>kea-dhcp-1.3.0 (这个下面有下载链接。安装教程参考官网)</li></ol><blockquote><p>当时的版本</p></blockquote><p>安装命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install rp-pppoe ppp radvd</span><br></pre></td></tr></table></figure></p><h2 id="软件配置："><a href="#软件配置：" class="headerlink" title="软件配置："></a>软件配置：</h2><h3 id="PPPOE-SERVER"><a href="#PPPOE-SERVER" class="headerlink" title="PPPOE-SERVER"></a>PPPOE-SERVER</h3><p>命令 ：<code>vim /etc/ppp/options</code></p><blockquote><p>(要是这个文件没有自己创建)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Local</span><br><span class="line">ipv6 ,</span><br><span class="line"><span class="meta">#</span> 注意ipv6后面必须要隔一个空格+逗号。去掉会拨号不成功。</span><br></pre></td></tr></table></figure><p>命令：<code>vim /etc/ppp/pppoe-server-options</code></p><blockquote><p>(要是这个文件没有自己创建)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> PPP options for the PPPoE server</span><br><span class="line"><span class="meta">#</span> LIC: GPL</span><br><span class="line">require-pap</span><br><span class="line">require-chap</span><br><span class="line">login</span><br><span class="line">+ipv6</span><br><span class="line">lcp-echo-interval 10</span><br><span class="line">lcp-echo-failure 2</span><br><span class="line">logfile /var/log/pppoe.log</span><br></pre></td></tr></table></figure><p>命令： <code>vim /etc/ppp/chap-secrets</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"test" * "test" *</span><br><span class="line"><span class="meta">#</span> "账号" * "密码" *</span><br></pre></td></tr></table></figure></p><p><strong>启动pppoe命令</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pppoe-server -I enp4s0 -L 192.168.5.1 -R 192.168.5.100 -N 20</span><br></pre></td></tr></table></figure></p><blockquote><p>-l ： 后面带的是你需要用作提供pppoe上网的网卡名称。<br>-L :   接你的提供服务的地址。<br>-R： 接你提供服务的地址池的起始<br>-N:   最大可拨号数量。  </p></blockquote><h3 id="RADVD"><a href="#RADVD" class="headerlink" title="RADVD"></a>RADVD</h3><p>命令：<code>vim /etc/radvd.conf</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface enp4s0                #接你拨号上网的网卡名称</span><br><span class="line">&#123;</span><br><span class="line">AdvSendAdvert on;           #启用路由器公告（RA）功能</span><br><span class="line">MinRtrAdvInterval 30;       #每隔30-100秒间隔发送公告消息</span><br><span class="line">MaxRtrAdvInterval 100;</span><br><span class="line">AdvManagedFlag off;         # M值</span><br><span class="line">AdvOtherConfigFlag on;      # O值</span><br><span class="line">prefix 2020:db8:2::/64      #发送的前缀信息</span><br><span class="line">&#123;</span><br><span class="line">AdvOnLink on;</span><br><span class="line">AdvAutonomous on;       #公告的前缀可用来自动位置配置</span><br><span class="line">AdvRouterAddr off;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>启动命令</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radvd -C /etc/radvd.conf</span><br></pre></td></tr></table></figure></p><blockquote><p><code>-C</code>的c是大写</p></blockquote><h3 id="KEA-DHCP"><a href="#KEA-DHCP" class="headerlink" title="KEA DHCP"></a>KEA DHCP</h3><p>下载链接：<a href="https://www.isc.org/downloads/" target="_blank" rel="noopener">https://www.isc.org/downloads/</a><br>官方文档：<a href="ftp://ftp.isc.org/isc/kea/1.2.0/doc/kea-guide.html" target="_blank" rel="noopener">ftp://ftp.isc.org/isc/kea/1.2.0/doc/kea-guide.html</a>  </p><blockquote><p>这里需要注意了。如果编译不过可能是因为kea依赖的库没有安装。需要先安装kea的依赖库。</p></blockquote><p>照着上面这个链接的教程去安装。然后修改配置文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/kea/kea.conf</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> DHCPv6 configuration starts here.</span><br><span class="line">"Dhcp6":</span><br><span class="line">&#123;</span><br><span class="line">    # Add names of interfaces to listen on.</span><br><span class="line">    "interfaces-config": &#123;</span><br><span class="line">    "interfaces": ["enp4s0","*"]</span><br><span class="line">    &#125;,</span><br><span class="line">    "option-data": [ &#123;</span><br><span class="line">    "name": "dns-servers",</span><br><span class="line">    "data": "2001::1, 2001::2"</span><br><span class="line">    &#125; ],</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The following list defines subnets. Uncomment to enable them.</span><br><span class="line">"subnet6": [</span><br><span class="line">&#123;    </span><br><span class="line">    "subnet": "2017:db8:2::/64",</span><br><span class="line">    "pools": [ &#123; "pool": "2017:db8:2::1-2017:db8:2::ffff" &#125; ],</span><br><span class="line">    "reservations": [</span><br><span class="line">        &#123;</span><br><span class="line">            "duid": "00:03:00:01:f4:28:54:00:15:51",</span><br><span class="line">            "prefixes": [ "2017::/64" ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "interface":"enp4s0"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>启动命令</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kea-dhcp6 -c /etc/kea/kea.conf</span><br></pre></td></tr></table></figure></p><blockquote><p>（c是小写）,该进程不会后台进行。</p></blockquote>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pppoe server </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux centos 配置更新yum源</title>
      <link href="/20170815/linux-cenos-config/"/>
      <url>/20170815/linux-cenos-config/</url>
      <content type="html"><![CDATA[<p>在CentOS 7下更改yum源与更新系统。</p><p>[1] 首先备份/etc/yum.repos.d/CentOS-Base.repo<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>[2] 进入yum源配置文件所在文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# cd /etc/yum.repos.d/</span><br></pre></td></tr></table></figure></p><p>[3] 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br></pre></td></tr></table></figure></p><p>[4] 运行yum makecache生成缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum makecache</span><br></pre></td></tr></table></figure></p><p>[5] 更新系统(时间比较久,主要看个人网速)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum -y update</span><br></pre></td></tr></table></figure></p><blockquote><p>到这一步就可以更新完成了。</p></blockquote><h1 id="一、查看SELinux状态命令："><a href="#一、查看SELinux状态命令：" class="headerlink" title="一、查看SELinux状态命令："></a>一、查看SELinux状态命令：</h1><p>1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态<br>SELinux status:                 enabled<br>2、getenforce                 ##也可以用这个命令检查</p><h1 id="二、关闭SELinux方法："><a href="#二、关闭SELinux方法：" class="headerlink" title="二、关闭SELinux方法："></a>二、关闭SELinux方法：</h1><p>1、临时关闭（不用重启机器）：</p><p>复制代码代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 #设置SELinux 成为permissive模式</span><br><span class="line">#setenforce 1 设置SELinux 成为enforcing模式</span><br></pre></td></tr></table></figure></p><p>2、修改配置文件需要重启机器：<br>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>重启机器即可</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> centos 7 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动画效果 (Animation)</title>
      <link href="/20170815/css-animation/"/>
      <url>/20170815/css-animation/</url>
      <content type="html"><![CDATA[<h1 id="动画效果-Animation"><a href="#动画效果-Animation" class="headerlink" title="动画效果 (Animation)"></a>动画效果 (Animation)</h1><blockquote><p>定义一写自己喜欢的动画效果。通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>animation 属性是一个简写属性，用于设置六个动画属性：<br>animation-name （动画名称）<br>animation-duration （时间）<br>animation-timing-function （速度曲线）<br>animation-delay （延时）<br>animation-iteration-count （播放的次数）<br>animation-direction （反向播放）    </p><a id="more"></a><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>animation-name</td><td>规定需要绑定到选择器的 keyframe 名称。。</td></tr><tr><td>animation-duration</td><td>规定完成动画所花费的时间，以秒或毫秒计。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。</td></tr><tr><td>animation-delay</td><td>规定在动画开始之前的延迟。</td></tr><tr><td>animation-iteration-count</td><td>规定动画应该播放的次数。</td></tr><tr><td>animation-direction</td><td>规定是否应该轮流反向播放动画。</td></tr></tbody></table><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>animation: name duration timing-function delay iteration-count direction;</code>   </p><table><thead><tr><th>属性</th><th>name</th><th>duration</th><th>timing-function</th><th>delay</th><th>iteration-count</th><th>direction</th></tr></thead><tbody><tr><td>值</td><td>keyframename</td><td>time</td><td>linear</td><td>time</td><td>n</td><td>normal</td></tr><tr><td></td><td>none</td><td></td><td>ease</td><td></td><td>infinite</td><td>alternate</td></tr><tr><td></td><td></td><td></td><td>ease-in</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>ease-out</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>ease-in-out</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>ease-in-out</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>cubic-bezier(n,n,n,n)</td><td></td><td></td></tr></tbody></table><p><strong>简单案例</strong>：<br>css &gt;&gt;&gt;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.circle</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="comment">/* animation */</span></span><br><span class="line"><span class="attribute">animation</span>: circle <span class="number">1s</span> linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> circle &#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123; <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#00A4C1</span>; &#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123; <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">#00A4C1</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html &gt;&gt;&gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"circle"</span>&gt;Yexk&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><img src="/20170815/css-animation/1_css_animate.gif"><h3 id="1-name"><a href="#1-name" class="headerlink" title="1. name"></a>1. name</h3><p>为 @keyframes 动画规定名称。<br><strong>语法：</strong> <code>animation-name: keyframename|none;</code>    </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>keyframename</td><td>规定需要绑定到选择器的 keyframe 的名称。</td></tr><tr><td>none</td><td>规定无动画效果（可用于覆盖来自级联的动画）。</td></tr></tbody></table><h3 id="2-duration"><a href="#2-duration" class="headerlink" title="2. duration"></a>2. duration</h3><p>定义动画完成一个周期所需要的时间，以秒或毫秒计。<br><strong>语法：</strong> <code>animation-duration: time;</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>time</td><td>规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。</td></tr></tbody></table><h3 id="3-timing-function"><a href="#3-timing-function" class="headerlink" title="3. timing-function"></a>3. timing-function</h3><p>定义动画的速度曲线。速度曲线定义动画从一套 CSS 样式变为另一套所用的时间。<br><strong>语法：</strong> <code>animation-timing-function: value;</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table><h3 id="4-delay"><a href="#4-delay" class="headerlink" title="4. delay"></a>4. delay</h3><p>定义动画何时开始。<br><strong>语法：</strong> <code>animation-timing-function: value;</code>  </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>time</td><td>可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。</td></tr></tbody></table><h3 id="5-iteration-count"><a href="#5-iteration-count" class="headerlink" title="5. iteration-count"></a>5. iteration-count</h3><p>定义动画的播放次数。<br><strong>语法：</strong> <code>animation-iteration-count: n|infinite;</code>   </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>n</td><td>定义动画播放次数的数值。</td></tr><tr><td>infinite</td><td>规定动画应该无限次播放。</td></tr></tbody></table><h3 id="6-direction"><a href="#6-direction" class="headerlink" title="6. direction"></a>6. direction</h3><p>定义是否应该轮流反向播放动画。如果 animation-direction 值是 “alternate”，则动画会在奇数次数（1、3、5 等等）正常播放，而在偶数次数（2、4、6 等等）向后播放。  </p><p><strong>语法</strong> <code>animation-direction: normal|alternate;</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值。动画应该正常播放。</td></tr><tr><td>alternate</td><td>动画应该轮流反向播放。</td></tr></tbody></table><p><strong>实战运用：</strong></p><p>参考 animate.css</p>]]></content>
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> animation </tag>
            
            <tag> css动画 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gulp - 基于流的自动化构建工具</title>
      <link href="/20170815/gulp-get-start/"/>
      <url>/20170815/gulp-get-start/</url>
      <content type="html"><![CDATA[<blockquote><p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；它不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用它，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。</p></blockquote><a id="more"></a><p><strong>安装前提：需要安装nodejs环境。</strong></p><p>安装gulp使用命令：<code>cnpm install -g gulp</code></p><blockquote><p>cnpm是国内镜像版的npm。<a href="../other/npm_introduction.md">什么是npm？</a></p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>初始化一个node项目。需要配置一个package.json文件放到项目的根目录。<br><img src="/20170815/gulp-get-start/node_init.png"></p><h3 id="本地项目安装gulp"><a href="#本地项目安装gulp" class="headerlink" title="本地项目安装gulp"></a>本地项目安装gulp</h3><p>在项目的更目录下安装gulp，执行命令：<code>cnpm install gulp --save-dev</code></p><blockquote><p>一般工具这类的东西都安装到<strong>-dev</strong>环境下。</p></blockquote><img src="/20170815/gulp-get-start/install_gulp_local.png"><h3 id="本地安装gulp插件"><a href="#本地安装gulp插件" class="headerlink" title="本地安装gulp插件"></a>本地安装gulp插件</h3><p>这里拿编译sass的插件举例子。其他的插件也大小雷同。<br>安装命令：<code>cnpm install gulp-sass --save-dev</code><br><img src="/20170815/gulp-get-start/install_gulp_sass.png"></p><blockquote><p><strong>安装常用插件</strong>：</p></blockquote><table><thead><tr><th>名称</th><th>包名</th></tr></thead><tbody><tr><td>sass的编译</td><td>gulp-sass</td></tr><tr><td>编译 Less</td><td>gulp-less</td></tr><tr><td>自动添加css前缀</td><td>gulp-autoprefixer</td></tr><tr><td>压缩css</td><td>gulp-minify-css</td></tr><tr><td>压缩html</td><td>gulp-minify-html</td></tr><tr><td>js代码校验</td><td>gulp-jshint</td></tr><tr><td>合并js文件</td><td>gulp-concat</td></tr><tr><td>压缩js代码</td><td>gulp-uglify</td></tr><tr><td>压缩图片</td><td>gulp-imagemin</td></tr><tr><td>自动刷新页面</td><td>gulp-livereload</td></tr><tr><td>图片缓存，只有图片替换了才压缩</td><td>gulp-cache</td></tr><tr><td>更改提醒</td><td>gulp-notify</td></tr><tr><td>清除文件</td><td>del</td></tr><tr><td>编译 Jade</td><td>gulp-jade</td></tr><tr><td>创建本地服务器</td><td>gulp-connect</td></tr><tr><td>重命名文件</td><td>gulp-rename</td></tr></tbody></table><h3 id="在项目的更目录创建一个gulpfile-js文件"><a href="#在项目的更目录创建一个gulpfile-js文件" class="headerlink" title="在项目的更目录创建一个gulpfile.js文件"></a>在项目的更目录创建一个gulpfile.js文件</h3><blockquote><p><span style="color:red">注意：</span>这个文件名字是固定的，不允许更改。</p></blockquote><p>在根目录创建文件：<code>gulpfile.js</code><br>写入如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">const</span> sass_path = <span class="string">'./src/css/*.scss'</span>;</span><br><span class="line"><span class="comment">// 创建了一个任务，监听了scss文件，通过sass插件去编译生成css</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is sass task!'</span>);</span><br><span class="line">gulp.src(sass_path)</span><br><span class="line">.pipe(sass())</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/css/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 再创建一个gulp任务用于监听上面的任务。</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is default task! i\'m watch sass task!'</span>);</span><br><span class="line">gulp.watch(sass_path,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">gulp.run(<span class="string">'sass'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在<code>./src/css/</code>目录下创建一个文件,后缀为scss。如:<code>base.scss</code>。<br>使用sass语法写下样式文件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$gray : #ccc;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: $gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.body</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: $gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动gulp任务：<br><img src="/20170815/gulp-get-start/gulp_start.png"></p><blockquote><p>注意：启动命令为：gulp &lt;task名字&gt; 。当task名字为“defualt”的时候可以省略。</p></blockquote><p>如果运行不报错可以看到自动生成了dist目录。有css/base.css文件。<br><img src="/20170815/gulp-get-start/gulp_result.png"></p><blockquote><p>到此gulp快速入门完成了。更多的api和教程可以查看官方的：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">gulp官网的API</a>。<br>次案例的源码：<a href="code/gulp.zip">code/gulp.zip</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 自动化工具 </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery常用的方法</title>
      <link href="/20170815/jquery-common/"/>
      <url>/20170815/jquery-common/</url>
      <content type="html"><![CDATA[<p>一些常用的方法</p><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol><li><p><code>attr(name|properties|key,value|fn)</code> : 对元素属性的操作。（<code>prop()</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>); <span class="comment">// 获取a标签的href属性值。</span></span><br><span class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>,<span class="string">'http://yexk.cn'</span>); <span class="comment">// 给a标签的一个属性赋值。</span></span><br><span class="line">$(<span class="string">'a'</span>).attr(&#123;<span class="string">'href'</span>:<span class="string">'http://yexk.cn'</span>,<span class="string">'title'</span>:<span class="string">'Yexk'</span>&#125;); <span class="comment">// 给a标签的多个属性赋值。</span></span><br></pre></td></tr></table></figure></li><li><p><code>removeAttr(name)</code> : 移除元素属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).removeAttr(<span class="string">'href'</span>); <span class="comment">// 移除一个href属性</span></span><br></pre></td></tr></table></figure></li><li><p><code>addClass(class|fn)</code> ：添加一个class（类）名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"div"</span>).addClass(<span class="string">'show_div'</span>);</span><br><span class="line">&lt;!-- <span class="comment">// 结果： --&gt;</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"show_div"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>removeClass([class|fn])</code> : 移除元素的class（类）名。<br> 和3使用方法相同，效果相反。</p></li><li><p><code>html([val|fn])</code> : 对元素的内容进行操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).html(<span class="string">'&lt;p&gt;我是动态追加的&lt;/p&gt;'</span>); <span class="comment">// 添加内容。</span></span><br><span class="line">$(<span class="string">'div'</span>).html(); <span class="comment">// 获取内容 </span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">''</span>); <span class="comment">// 删除内容</span></span><br></pre></td></tr></table></figure></li><li><p><code>val([val|fn])</code> ：对元素的value值进行操作。<br> 使用方法和5相同。</p></li></ol><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol><li>ID 选择器<ul><li><code>#id</code></li></ul></li><li>class 选择器<ul><li><code>.class</code></li></ul></li><li>属性选择器<ul><li><code>[attribute]</code></li><li><code>[attribute=value]</code> </li></ul></li><li>表单选择器<ul><li><code>:input</code></li><li><code>:submit</code></li><li><code>:selected</code></li></ul></li><li>层级选择器<ul><li><code>#id .class</code></li></ul></li><li>混搭使用<ul><li><code>#id .class input[type=&quot;text&quot;]</code></li></ul></li></ol><h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><ol><li><p><code>hasClass(class)</code> ：检查当前的元素是否含有某个特定的类，如果有，则返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// html代码 --&gt;</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></span><br><span class="line">$(<span class="string">'div'</span>).hasClass(<span class="string">'show'</span>); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure></li><li><p><code>children([expr])</code> : 获取当前对象的子集（被选中的）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// html代码 --&gt;</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li class="li_ele"&gt;2&lt;/</span>li&gt;</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"li_ele"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></span><br><span class="line">$(<span class="string">'ul'</span>).children(<span class="string">'.li_ele'</span>); <span class="comment">// 获取到了第二个和第三个li元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>find(expr|obj|ele)</code> : 获取当前对象的子集（被选中的）。<br> 使用方式同上    </p></li><li><code>parent([expr])</code> : 获取当前对象的父集。<br> 使用方式同上    </li><li><code>prev([expr])</code> ：获取当前对象的前一个。<br> 使用方式同上    </li><li><code>next([expr])</code> ：获取当前对象的后一个。<br> 使用方式同上    </li><li><code>siblings([expr])</code> : 获取当前对象的所有同级元素。<br> 使用方式同上</li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li><p><code>on(events,[selector],[data],fn)</code> ：在选择元素上绑定一个或多个事件的事件处理函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* Act on the event */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 打印div</span></span><br><span class="line">&#125;); <span class="comment">// 给div加上点击事件。</span></span><br></pre></td></tr></table></figure></li><li><p><code>off(events,[selector],[fn])</code> ：在选择元素上移除一个或多个事件的事件处理函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).off(<span class="string">'click'</span>); <span class="comment">// 去掉div的单击事件。</span></span><br></pre></td></tr></table></figure></li><li><p><code>trigger(type,[data])</code> ：在每一个匹配的元素上触发某类事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form'</span>).trigger(<span class="string">'submit'</span>); <span class="comment">// 触发表单提交事件。</span></span><br></pre></td></tr></table></figure></li><li><p><code>triggerHandler(type, [data])</code> ：触发指定的事件类型上所有绑定的处理函数。<br> 使用方法同上</p><blockquote><p>如果你对一个focus事件执行了 .triggerHandler() ，浏览器默认动作将不会被触发，只会触发你绑定的动作。</p></blockquote><p> ps : 这个方法的行为表现与trigger类似，但有以下三个主要区别： </p><ul><li>第一，他不会触发浏览器默认事件。</li><li>第二，只触发jQuery对象集合中第一个元素的事件处理函数。</li><li>第三，这个方法的返回的是事件处理函数的返回值，而不是据有可链性的jQuery对象。此外，如果最开始的jQuery对象集合为空，则这个方法返回 undefined。</li></ul></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol><li><p><code>show([speed,[easing],[fn]])</code> ：显示隐藏的匹配元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码 --&gt;</span></span><br><span class="line">&lt;p style=<span class="string">"display: none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></span><br><span class="line">$(<span class="string">'p'</span>).show(); <span class="comment">// 立即显示。如果想显示动画可以传时间进去。`$('P').show(1000)`</span></span><br></pre></td></tr></table></figure></li><li><p><code>hide([speed,[easing],[fn]])</code> ：隐藏显示的元素。<br> 使用方法同上</p></li><li><p><code>animate(params,[speed],[easing],[fn])</code> : 用于创建自定义动画的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;button id=<span class="string">"run"</span>&gt;Run&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="ye_animate"&gt;Hello!&lt;/</span>div&gt;</span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"#run"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#ye_animate"</span>).animate(&#123; </span><br><span class="line">    width: <span class="string">"90%"</span>,</span><br><span class="line">    height: <span class="string">"100%"</span>,</span><br><span class="line">    fontSize: <span class="string">"10em"</span></span><br><span class="line">  &#125;, <span class="number">1000</span> );</span><br><span class="line">&#125;); <span class="comment">// 在一个动画中同时应用三种类型的效果。</span></span><br></pre></td></tr></table></figure></li><li><p><code>stop([clearQueue],[jumpToEnd])</code> ：立即停止动画效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设上面的已经点击了‘Run’。我们在创建一个stop按钮。</span></span><br><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;button id=<span class="string">"stop"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#ye_animate"</span>).stop();</span><br><span class="line">&#125;); <span class="comment">// 立即停止动画。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ol><li><p><code>jQuery.ajax(url,[settings])</code> : 创建同步或者异步的 HTTP 请求加载远程数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">'/path/to/file'</span>, <span class="comment">// 请求的路径</span></span><br><span class="line">type: <span class="string">'default GET (Other values: POST)'</span>, <span class="comment">// 请求的类型</span></span><br><span class="line">dataType: <span class="string">'default: Intelligent Guess (Other values: xml, json, script, or html)'</span>, <span class="comment">// 请求头的数据类型。</span></span><br><span class="line"><span class="keyword">async</span> : <span class="literal">true</span> , <span class="comment">// 同步或者异步， （默认是TRUE，异步。）</span></span><br><span class="line">data: &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="comment">// 请求的参数。</span></span><br><span class="line">beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 请求发送到请求返回前的时间。</span></span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码。</span></span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 请求失败后。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.get(url, [data], [callback], [type])</code> : 默认是GET请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'/path/to/file'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.post(url, [data], [callback], [type])</code> ： 默认是POST请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'/path/to/file'</span>, &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, xhr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.getScript(url, [callback])</code> ：GET 请求载入并执行一个 JavaScript 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.getScript(<span class="string">"/path/to/file"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 返回成功后的处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><ol><li><p><code>each(callback)</code> : 遍历对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></span><br><span class="line">&lt;img/&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.src = <span class="string">"test"</span> + i + <span class="string">".jpg"</span>; <span class="comment">// this指向调用着。（原生的dom对象）</span></span><br><span class="line"> &#125;);</span><br><span class="line">&lt;!-- <span class="comment">// 结果： --&gt;</span></span><br><span class="line">&lt;img src=<span class="string">"test0.jpg"</span> /&gt;&lt;img src="test1.jpg" /&gt;&lt;img src="test2.jpg" /&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>data([key],[value])</code> : 在一个div上存取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment">//HTML 代码: --&gt;</span></span><br><span class="line">&lt;div data-index=<span class="string">"ye_cs"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></span><br><span class="line">$(<span class="string">"div"</span>).data(<span class="string">"index"</span>);  <span class="comment">// ye_cs</span></span><br><span class="line">$(<span class="string">"div"</span>).data(<span class="string">"str"</span>, <span class="string">"hello world"</span>);  <span class="comment">// blah设置为hello</span></span><br></pre></td></tr></table></figure></li><li><p><code>jQuery.each(object, [callback])</code> ： 遍历对象。<br> 使用方式同1。</p></li><li><code>jQuery.type(obj)</code> : 检测obj的数据类型。<ul><li>jQuery.type(true)         === “boolean”</li><li>jQuery.type(3)            === “number”</li><li>jQuery.type(“test”)       === “string”</li><li>jQuery.type(function(){}) === “function”</li><li>jQuery.type([])           === “array”</li><li>jQuery.type(new Date())   === “date”</li><li>jQuery.type(/test/)       === “regexp”</li></ul></li><li><p><code>event.preventDefault()</code> ：阻止默认事件行为的触发。</p></li><li><p><code>serialize()</code> ：序列表表格内容为字符串。</p></li></ol>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端JavaScript调试</title>
      <link href="/20170815/mobile-debuger/"/>
      <url>/20170815/mobile-debuger/</url>
      <content type="html"><![CDATA[<blockquote><p>现在移动开发的技术不断成熟，但在移动上面开发调试是很复杂的。遇到些浏览器兼容性问题。且不说解决，能找到问题都是一个很麻烦的事情。<br>此文档适用用于PC端。</p></blockquote><a id="more"></a><h2 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h2><p>目前我已知的调试方式：</p><ol><li>源码调试。</li><li>alert调试。</li><li>浏览器的console打印调试（Chrome DevTools、Firebug）</li><li>控制台断点调试</li><li>Chrome浏览器的ChromeDevTools远程调试</li><li>weinre调试</li></ol><h3 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐指数 ：不推荐</span><br><span class="line">调试难度 ：*****</span><br><span class="line">实用性   ：*</span><br></pre></td></tr></table></figure><p>查看源代码的方式一步一步的去读代码，然后找到错误并修改。<br>这方式不适合我这种菜鸟。对于大神，请随意。我比较喜欢直接看结果的调试方式。</p><blockquote><p><strong>优点</strong>：可以装x。<br><strong>缺点</strong>：调试时间长，效率低。</p></blockquote><h3 id="alert调试"><a href="#alert调试" class="headerlink" title="alert调试"></a>alert调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐指数 ：***</span><br><span class="line">调试难度 ：****</span><br><span class="line">实用性   ：**</span><br></pre></td></tr></table></figure><p><code>alert()</code>方法的初衷是为了通过弹窗的方式，来警告或提示用户做对应的操作，并且有强制中断效果。<br>目前对于弹窗已经有许多替代品，而默认的alert常常都是用于调试。在我觉得有错误的位置前后操作。如果有弹窗就说明没问题。否则就出现问题。</p><p><strong>例如</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_1_alert.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 这里有很多很多代码。。。</span></span></span><br><span class="line"><span class="undefined">alert(1);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'ye_test_1'</span>).innerHTML = <span class="string">"Yexk"</span>;</span></span><br><span class="line"><span class="undefined">alert(2);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 这里有很多很多代码。。。</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过访问发现，这里只弹出了1，没有弹出2，那就是这两行代码中间出现了问题。<br>去寻找问题，发现了这行代码的意思是找到元素的ID为ye_test_1。但这个文档里面是没有这个元素的，所以报错了。<br>解决办法根据实际开发情况去更改代码就可以了。</p><blockquote><p>首先找到这段代码自己觉得有问题的地方，然后对这段代码进行前后加上alert()。<br>要是找不出问题在哪也没有关系，可以在一些关键的地方进行加上调试，然后进一步的缩小范围。<br><strong>优点</strong>：效果明显，简单除暴。<br><strong>缺点</strong>：操作麻烦，只能打印基本数据类型（字符串，数字，等）</p></blockquote><p>个人觉得这个调试虽然这方法简单粗暴，但是有利有弊，并且利小于弊。比如在for循环里面查看里面的执行情况，那就太麻烦了。这个可以根据实际情况酌情选择。</p><h3 id="浏览器的console打印调试"><a href="#浏览器的console打印调试" class="headerlink" title="浏览器的console打印调试"></a>浏览器的console打印调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐指数 ：*****</span><br><span class="line">调试难度 ：****</span><br><span class="line">实用性   ：****</span><br></pre></td></tr></table></figure><p>控制台调试工具，目前属于最好用的调试工具，没有有之一。目前常用的：<a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">Chrome DevTools</a>（Chrome浏览器自带）、Firebug（需要自行安装）、其他浏览器自带的。<br>调试方法相对文艺，功能强大。可以查看具体的执行位置，报错的位置。<br><strong>例如</strong>：<br>对下面的div进行赋值为”js is so cool!”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_2_console.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">div.innerHTML = <span class="string">'js is so cool'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>类似这种错误，通过上面所说的alert方法就调试不出为啥，因为语法没有错误。这里可以通过查看获取的div对象查找原因。<br>代码改成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br><span class="line">div.innerHTML = <span class="string">'js is so cool'</span>;</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/20170815/mobile-debuger/1_1_console.png"></p><p>可以发现获取的div元素是被一个数组给包裹起来了。而对div直接复制相当于给数组添加一个键值对。所以这里要想取得div元素对象，只要在取得div数组里下标为0的元素然后在进行赋值就行了。<br>最后代码改成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br><span class="line">div[<span class="number">0</span>].innerHTML = <span class="string">'js is so cool'</span>;</span><br></pre></td></tr></table></figure></p><p>修改后的结果：<br><img src="/20170815/mobile-debuger/1_2_reult_sconsole.png"><br>这里也可以通过语法知识去判断，不过在这里只是为了演示这个console的案例。</p><blockquote><p>控制台打印已经可满足大部分调试了，基本没有控制台解决不了的问题。如果有，请配合其他调试方式和带上脑子。<br><strong>优点</strong>：效果明显，简单除暴+功能齐全，可以打印任何数据类型，操作简单使用方便。<br><strong>缺点</strong>：打印对象太多了就会展不开对象的信息。</p></blockquote><p>附录：<a href="other/console_other.md">console对象的其他方法</a></p><h3 id="控制台断点调试"><a href="#控制台断点调试" class="headerlink" title="控制台断点调试"></a>控制台断点调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐指数 ：***</span><br><span class="line">调试难度 ：****</span><br><span class="line">实用性   ：**</span><br></pre></td></tr></table></figure><p>有很多时候想知道代码是怎么走的。想看看整个函数是怎么执行的。通过alert弹窗提示和console控制台打印都太麻烦了。而且执行流程还是看的不清晰。在编程领域有个调试方式很好用并且很很简洁明了的，那就是<code>断点调试</code>。<br><br>首先我们来看看控制台的调试界面：<br><img src="/20170815/mobile-debuger/1_3_sources.png"></p><ol><li><strong>文档树</strong>：显示当前文档引用的文档关系。</li><li><strong>源码区</strong>：显示你选择的文件的源码。并且可以查看文件源码，加断点。</li><li><strong>监听区</strong>：查看你添加的监听事件或者变量。</li></ol><p><strong>例如</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> even = <span class="number">0</span>,odd = <span class="number">0</span> ;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="number">0</span> == i%<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="undefined">even++;</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">odd++;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里可以在for循环的开始进行打断点调试。<br>步骤：</p><ol><li>选择需要查看的文件，找对应的代码段。</li><li>给想查看的代码段前加上断点。（在行号处单击）</li><li>监听想看的的变量。选中-&gt;右键-&gt;Add selected text to watches</li><li>刷新页面，js代码会停止在断点的位置。</li><li>点击监听窗口的下一步（或者按F11）。</li><li>根据业务逻辑查看代码的走向，看看是否正确。然后在做对应的修复。</li></ol><blockquote><p>打上断点后再次单击就是取消断点。</p></blockquote><p>结果：<br><img src="/20170815/mobile-debuger/1_4_point.gif"></p><p>通过断点，监听了三个变量，我们可以看到详细的代码执行流程和变量的赋值情况。</p><blockquote><p>断点调试，虽然好用，但总觉得有点大材小用。</p><p><strong>优点</strong>：调试过程非常明了，效果明显且效率高。<br><strong>缺点</strong>：当引用了jQuery的DOM操作的时候调试起来比较鸡肋。</p></blockquote><h3 id="Chrome-DevTools远程调试"><a href="#Chrome-DevTools远程调试" class="headerlink" title="Chrome DevTools远程调试"></a>Chrome DevTools远程调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐指数 ：**</span><br><span class="line">调试难度 ：**</span><br><span class="line">实用性   ：**</span><br></pre></td></tr></table></figure><p>移动开发最头痛的是调试，想要看看手机端里面的页面有什么问题。</p><blockquote><p>调试前提</p></blockquote><ol><li>必须在PC端和移动端都配置安装好chrome浏览器。</li><li>必须用数据线与电脑连接。</li></ol><blockquote><p>这个有点像chrome里面的移动设备模式。调试模式基本差不多。</p></blockquote><p>调试步骤：</p><ol><li>在PC和Android手机都装好chrome浏览器。</li><li>手机连接到PC，并且装好驱动。打开开发者权限-USB调试功能。<img src="/20170815/mobile-debuger/android_use.png"></li><li>在手机端的chrome浏览器访问需要调试的页面。</li><li>在PC端的chrome浏览器输入：<code>chrome://inspect</code>。<img src="/20170815/mobile-debuger/chrome_inspect.png"></li><li>点击“inspect”,就会弹出控制台。<img src="/20170815/mobile-debuger/chrome_usb_debuger.png"><blockquote><p>图中的手机是真机设备。并不是浏览器自带的。当PC浏览器在调试的时候手机界面也会跟着动。实现同步。</p></blockquote></li></ol><p>调试演示：<br><img src="/20170815/mobile-debuger/chrome_demo.gif"></p><blockquote><p>接下来就可以和浏览器的控制台一样自行调试了。</p><p><strong>优点</strong>：调试过程非常明了，效果明显且效率高。<br><strong>缺点</strong>：需要真机。</p></blockquote><h3 id="weinre调试"><a href="#weinre调试" class="headerlink" title="weinre调试"></a>weinre调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐指数 ：*</span><br><span class="line">调试难度 ：*</span><br><span class="line">实用性   ：*</span><br></pre></td></tr></table></figure><p>上述所说的问题有一定的局限性。必须是PC和手机都有chrome浏览器，然后需要数据线连接。这样并不方便调试兼容性且麻烦。</p><blockquote><p>Weinre(WebInspector Remote)是一款基于Web Inspector(Webkit)的远程调试工具，借助于网络，可以在PC上直接调试运行在移动设备上的远程页面，中文意思是远程Web检查器，有了Weinre，在PC上可以即时修改目标网页的HTML/CSS/JavaScript，调试过程可实时显示移动设备上页面的预览效果，并同步显示设备页面的错误和警告信息，可以查看网络资源的信息，不过weinre不支持断点调试</p></blockquote><p><strong>安装前提：</strong><br><span style="color:#f0f">需要<code>nodejs</code>环境。安装node教程请自行度娘。占位飞机：<a href="../nodejs/nodejs_install.md">nodejs教程</a></span></p><p><strong>安装weinre</strong><br><code>npm -g install weinre</code>  //安装weinre<br><img src="/20170815/mobile-debuger/weinre_install.png"></p><blockquote><p>这里我使用了淘宝镜像（cnpm）。</p></blockquote><p><strong>启动</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 语法: weinre --boundHost [hostname | ip address |-all-]  --httpPort [port]  //启动weinre</span><br><span class="line">weinre --boundHost -all-  --httpPort 8080</span><br></pre></td></tr></table></figure></p><img src="/20170815/mobile-debuger/weinre_start.png"><p>通过浏览器（推荐使用PC端）访问就应该可以看到这个界面。<br><img src="/20170815/mobile-debuger/weinre_page.png"></p><p>启动来之后需要配置后才能使用。在需要调试的代码中添加一个脚本文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://192.168.10.24:8080/target/target-script-min.js#anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把IP地址换成局域网上的ip，端口改成刚刚启动时候配置的。 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>点击“Access Points”下的那个连接：<code>http://127.0.0.1:8080/client/#anonymous</code><br>可以看到这个界面：<br><img src="/20170815/mobile-debuger/weinre_connect_success.png"></p><blockquote><p>如果targets显示none就代表没配置成功或者没有打开配置好需要调试的页面。如果显示绿色表示已经监听到事件页面了。</p></blockquote><p>所有的配置以及完成了。接下来就看看效果。<br><img src="/20170815/mobile-debuger/weinre_demo.gif"></p><blockquote><p>接下来就可以拥有调试里面的样式等等。不过这个功能配置相对麻烦。。一般都不会使用。</p><p><strong>优点</strong>：调试过程非常明了，效果明显且效率高。<br><strong>缺点</strong>：配置比较麻烦，并且调试没有浏览器自带的控制台利索，不怎么好用。 </p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>我个人一般而且强力推第三种，浏览器控制台够用了。<br>正所谓调试页面的方法千千万，找到合适自己的就好。</p></blockquote>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端调试 </tag>
            
            <tag> console </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bower 快速入门</title>
      <link href="/20170815/bower-get-start/"/>
      <url>/20170815/bower-get-start/</url>
      <content type="html"><![CDATA[<h2 id="What-is-bower-什么是bower？"><a href="#What-is-bower-什么是bower？" class="headerlink" title="What is bower?(什么是bower？)"></a>What is bower?(什么是bower？)</h2><p>Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。使用前提，需要按照node.js。并且使用npm包管理来安装bower。</p><p>命令：<code>npm install -g bower</code> </p><blockquote><p>PS:</p><ul><li>NPM：NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。 </li><li>这行命令是Bower的全局安装，-g 操作表示全局。 </li></ul></blockquote><h2 id="How-to-use-怎么使用？"><a href="#How-to-use-怎么使用？" class="headerlink" title="How to use?(怎么使用？)"></a>How to use?(怎么使用？)</h2><p>命令：<code>bower install &lt;packgage&gt;</code></p><blockquote><p>eg. <code>bower install jquery</code><br>上述命令完成以后，你会在你刚才创建的目录下看到一个bower_components的文件夹。里面有jQuery文件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">$(function()&#123;</span></span><br><span class="line"><span class="undefined">alert(1);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他命令：</p><ul><li>包搜索：<code>bower search jquery</code></li><li>包信息：<code>bower info jquery</code></li><li>所有包：<code>bower list</code></li><li>包卸载：<code>bower uninstall jquery</code></li></ul><h2 id="bower-json文件的作用"><a href="#bower-json文件的作用" class="headerlink" title="bower.json文件的作用"></a>bower.json文件的作用</h2><blockquote><p>有待科普</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>表示放弃使用。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bower </tag>
            
            <tag> nodejs </tag>
            
            <tag> 自动化工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对比Laravel5.4 和ThinkPHP5 的区别</title>
      <link href="/20170815/%E5%AF%B9%E6%AF%94Laravel5-4-%E5%92%8CThinkPHP5-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/20170815/%E5%AF%B9%E6%AF%94Laravel5-4-%E5%92%8CThinkPHP5-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="对比Laravel5-4-和ThinkPHP5-的区别"><a href="#对比Laravel5-4-和ThinkPHP5-的区别" class="headerlink" title="对比Laravel5.4 和ThinkPHP5 的区别"></a>对比Laravel5.4 和ThinkPHP5 的区别</h1><h2 id="两者相同部分"><a href="#两者相同部分" class="headerlink" title="两者相同部分"></a>两者相同部分</h2><ol><li>使用的<code>public/index.php</code>作为项目入口。</li><li>使用了<code>MVC设计思想</code>。</li><li>url都使用了<code>PATHINFO模式</code>。</li><li><code>命令行模式</code>。</li><li>支持分布式数据库设计。</li><li>支持路由模式</li><li>支持表单验证机制。</li><li>支持缓存</li><li>支持错误和日志记录</li><li>支持<code>Mysql</code>、<code>SqlServer</code>、<code>PgSQL</code>、<code>Sqlite</code>数据库</li><li>资源控制器(RESTful)</li><li>数据库迁移（migration）</li><li>支持模型关联，链式操作</li><li>监听SQL</li><li>支持多语言</li><li>支持redis<br>xx. …(目前只发现了这么多，后续有在再补充)</li></ol><a id="more"></a><p><strong>流程图</strong><br><img src="/20170815/对比Laravel5-4-和ThinkPHP5-的区别/laravel5.4.png" title="laravel"><br><img src="/20170815/对比Laravel5-4-和ThinkPHP5-的区别/tp5.png" title="tp5"></p><blockquote><p>两者在使用和搭建上大致相同，通过相同的入口文件。类似的配置文件。和差不多的操作。</p></blockquote><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="Laravel5-4"><a href="#Laravel5-4" class="headerlink" title="Laravel5.4"></a>Laravel5.4</h3><ul><li>服务容器<blockquote><p>Laravel 务容器是管理类依赖和运行依赖注入的有力工具。依赖注入是一个花俏的名词，它实质上是指：类的依赖通过构造器或在某些情况下通过「setter」方法进行「注入」。</p></blockquote></li><li>服务提供者<blockquote></blockquote></li><li>Facades</li><li>Contracts<blockquote></blockquote></li><li>中间件<blockquote><p>Laravel 中间件提供了一种方便的机制来过滤进入应用的 HTTP 请求。</p></blockquote></li><li>CSRF 保护</li><li>Blade 模板</li><li>Laravel Mix</li><li>广播系统</li><li>集合</li><li>事件系统</li><li>消息通知</li><li>队列</li><li>任务调度</li></ul><h3 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h3><ul><li>前置操作</li><li>行为（Behavior）</li><li>分页实现</li></ul><blockquote><p>详细的对比内容后续补充。</p></blockquote>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css基本入门</title>
      <link href="/20170815/css%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/"/>
      <url>/20170815/css%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="CSS基本入门"><a href="#CSS基本入门" class="headerlink" title="CSS基本入门"></a>CSS基本入门</h1><p><strong>基本语法：</strong> <code>选择器{属性名:值;}</code></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>常用的选择器：</p><ol><li>元素选择<code>p{color:red}</code></li><li>ID选择器<code>#ID{color:red}</code></li><li>CLASS类选择器<code>.class{color:red}</code></li><li>后代选择器<code>div p{color:red}</code></li></ol><h2 id="常用的样式"><a href="#常用的样式" class="headerlink" title="常用的样式"></a>常用的样式</h2><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ol><li>背景颜色(background-color)</li><li>背景颜色(background-image)</li><li><p>背景颜色(background-position)</p><blockquote><p>简写形式 <code>body {background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;}</code></p></blockquote></li></ol><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ol><li>文本颜色(color)</li><li>对齐方式(text-align)</li><li>文本修饰(text-decoration)</li><li>字体大小(font-size)</li><li>文本修饰(font-family)</li></ol><h4 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h4><ol><li>内边距(padding)</li><li>外边距(margin)</li></ol><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p>1、边框</p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ol><li>静态定位（static）</li><li>相对定位（relative）</li><li>绝对定位（absolute）</li><li>固定定位（fixed）</li></ol><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><ol><li>左浮动</li><li>右浮动</li><li>清除浮动</li></ol><h4 id="伪类元素"><a href="#伪类元素" class="headerlink" title="伪类元素"></a>伪类元素</h4><h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p>样式的引用方式:</p><ul><li>外部样式表（<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</code>）</li><li>内部样式表（<code>&lt;style&gt;p{color:red}&lt;/style&gt;</code>）</li><li>(X)导入样式（<code>&lt;style type=&quot;text/css&quot;&gt; @import &quot;style.css&quot;&lt;/style&gt;</code>）</li><li>内联(行内)样式（<code>&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt;</code>）</li></ul><blockquote><p><strong>样式权重问题：</strong><br>浏览器缺省设置 -&gt; 外部样式表 -&gt; 内部样式表（位于 <head> 标签内部） -&gt; 内联样式（在 HTML 元素内部）。<br>标签选择器 -&gt; 类选择器 -&gt; ID选择器 </head></p></blockquote>]]></content>
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP中获取文件扩展名的N种方法</title>
      <link href="/20170815/PHP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/20170815/PHP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="PHP中获取文件扩展名的N种方法"><a href="#PHP中获取文件扩展名的N种方法" class="headerlink" title="PHP中获取文件扩展名的N种方法"></a>PHP中获取文件扩展名的N种方法</h2><p>从网上收罗的，基本上就以下这几种方式：</p><h4 id="第1种方法："><a href="#第1种方法：" class="headerlink" title="第1种方法："></a>第1种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> substr(strrchr($file, <span class="string">'.'</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第2种方法："><a href="#第2种方法：" class="headerlink" title="第2种方法："></a>第2种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> substr($file, strrpos($file, <span class="string">'.'</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第3种方法："><a href="#第3种方法：" class="headerlink" title="第3种方法："></a>第3种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$info = explode(<span class="string">'.'</span>, $file);</span><br><span class="line"><span class="keyword">return</span> end($info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第4种方法："><a href="#第4种方法：" class="headerlink" title="第4种方法："></a>第4种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$info = pathinfo($file);</span><br><span class="line"><span class="keyword">return</span> $info[<span class="string">'extension'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第5种方法："><a href="#第5种方法：" class="headerlink" title="第5种方法："></a>第5种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pathinfo($file, PATHINFO_EXTENSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>大概看了下上面的几种情况。你会喜欢用几种呢？</p></blockquote><p>接下来就开始测试一下各种刁钻的问题。</p><ul><li>路径1. /home/test  </li><li>路径2. /init.d/test  </li><li>路径3. test.tar.gz  </li></ul><p>对应这四个情况。发现使用路径1去测试方法4，出现警告：<code>Undefined index: extension</code>。<br>使用路径2去测试方法1,方法2,方法3，都出现了取错后缀的问题。<br>方法5基本能应对上面的路径1和路径2。但还有一个问题。那就是遇到tar.gz这样的后缀的时候还是会有问题。<br>所以路径3的后缀是tar.gz，使用以上几种的方式都不能正确的取得后缀名，这个还是需要自己写一个判断或者限定。</p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令行秘钥创建</title>
      <link href="/20170815/git%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%98%E9%92%A5%E5%88%9B%E5%BB%BA/"/>
      <url>/20170815/git%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%98%E9%92%A5%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ol><li>打开 <code>Git Bash.</code> 命令行。</li><li><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>将邮箱换成你的邮箱，一直按回车就好了。</p></blockquote></li><li><p>最后会在用户目录下生成 <code>~/.ssh/id_rsa</code> 和 <code>~/.ssh/id_rsa.pub</code> 文件</p></li><li><p>在GitHub页面上的个人设置里面找到<code>SSH and GPG keys</code><br>然后点击 <code>New SSH key</code><br>把刚刚创建的 <code>id_rsa.pub</code> 文件的内容添加到里面去。保存。</p></li><li><p>最终大工搞成。</p></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
